<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kajlund.net</title>
  <subtitle>Personal blog of Kaj Lund a.k.a. LuKa</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kajlund.net/"/>
  <updated>2017-06-18T15:38:57.203Z</updated>
  <id>http://kajlund.net/</id>
  
  <author>
    <name>Kaj Lund</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue Basics</title>
    <link href="http://kajlund.net/2017/06/17/vue-basics/"/>
    <id>http://kajlund.net/2017/06/17/vue-basics/</id>
    <published>2017-06-17T18:41:30.000Z</published>
    <updated>2017-06-18T15:38:57.203Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://vuejs.org" target="_blank" rel="external">Vue.js</a> <em>(pronounced /vjuː/, like view)</em> is a JavaScript library for building interactive web interfaces. The goal of Vue.js is to provide the benefits of reactive data binding and composable view components with an API that is as simple as possible. It was created and is maintained by by <a href="http://evanyou.me/" target="_blank" rel="external">Evan You</a> a former employee at Google and Meteor.</p>
<h2 id="Why-Vue"><a href="#Why-Vue" class="headerlink" title="Why Vue?"></a>Why Vue?</h2><ul>
<li>Vue is feature rich despite small size</li>
<li>Simplicity - Easy to get going and allows you to use ES5, ES6 or even TypeScript</li>
<li>Compactness - 16Kb minified and gzipped</li>
<li>Speed - Great runtime performance</li>
<li>Versatile - works for small and large projects</li>
<li>Very good documentation</li>
</ul>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul>
<li>ES5 or ES6 style compatible down to IE8</li>
<li>Templates using HTML like Angular with Directives</li>
<li>Reactivity</li>
<li>2-way data binding</li>
<li>Components</li>
<li><a href="http://router.vuejs.org/" target="_blank" rel="external">Vue Router</a> for routing, <a href="https://vuex.vuejs.org/" target="_blank" rel="external">Vuex</a> for state management</li>
</ul>
<h5 id="Vue-in-comparison"><a href="#Vue-in-comparison" class="headerlink" title="Vue in comparison"></a>Vue in comparison</h5><ul>
<li>Vue uses HTML templates and directives but supports React-style render methods and JSX.</li>
<li>You can use build tools and transpilers but you don’t have to</li>
<li>Vue has a small footprint (~26KB minified) so could also be used for simple scenarios. You could for instance replace Bootstrap + jQuery with <a href="http://yuche.github.io/vue-strap/" target="_blank" rel="external">VueStrap</a></li>
<li>Simple syntax compared to React, also faster</li>
</ul>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Check <a href="https://vuejs.org/v2/guide/installation.html" target="_blank" rel="external">here</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Minimal</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;):</div></pre></td></tr></table></figure>
<ul>
<li>Vue proxies all data properties to make them available via this.</li>
<li>You cannot have Vue evaluationg expressions fot html attributes i.e. <code>&lt;a href=&quot;&quot;&gt;Link&lt;/a&gt;</code> Use the <a href="https://vuejs.org/v2/api/#v-bind" target="_blank" rel="external">v-bind directive</a> instead.</li>
</ul>
<blockquote>
<p>Avoid writing code in view templates. Use calculated attributes and methods.</p>
</blockquote>
<h2 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h2><p>A <a href="https://vuejs.org/v2/api/#Directives" target="_blank" rel="external">directive</a> is an instruction placed in the view template</p>
<blockquote>
<p>Use <code>v-bind</code> for binding to html attributes, use <code>v-on</code> (@) for listening to events and finally <code>v-model</code> for two-way data binding.</p>
</blockquote>
<table>
<thead>
<tr>
<th>Directive</th>
<th>Shorthand</th>
<th>Sample</th>
</tr>
</thead>
<tbody>
<tr>
<td>v-on</td>
<td>@</td>
<td>v-on:click -&gt; @click</td>
</tr>
<tr>
<td>v-bind</td>
<td>:</td>
<td>v-bind:href -&gt; :href</td>
</tr>
</tbody>
</table>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p><a href="https://vuejs.org/v2/guide/events.html" target="_blank" rel="external">Events</a> are a fundamental part for interactions with the user. Vue can intercept most events and allows you to write custom event handlers.</p>
<p>The generic syntax is: <code>v-on:DOMevent</code>=”methodEventHandler” where DOMevent is any DOM event and methodEventHandler is a function in the methods section of your Vue declaration. Shortcut for v-on is the @ sign.</p>
<h5 id="Passing-Event-Arguments"><a href="#Passing-Event-Arguments" class="headerlink" title="Passing Event Arguments"></a>Passing Event Arguments</h5><p>You can pass arguments to event handler like any other function. If you need access to the original DOM event you can pass it as a param using the special <code>$event</code> variable.</p>
<h5 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h5><p>Vue implements so called <a href="https://vuejs.org/v2/guide/events.html#Event-Modifiers" target="_blank" rel="external">Event Modifiers</a> to deal with DOM event details so that you don’t have to deal with a lot of similar logic in your event handlers.</p>
<p>Use <code>event.preventDefault()</code> and  <code>event.stopPropagation()</code> in an event handler to stop default behavior.</p>
<p><a href="https://vuejs.org/v2/guide/events.html#Key-Modifiers" target="_blank" rel="external">Key modifiers</a> provides similar functionality for key events. I.e. <code>&lt;input type=&quot;text&quot; v-on:keyup.enter=&quot;alertMe()&quot;&gt;</code></p>
<h2 id="Two-Way-Data-Binding"><a href="#Two-Way-Data-Binding" class="headerlink" title="Two-Way Data Binding"></a>Two-Way Data Binding</h2><p>Two-way data binding means updating a variable with the value from a UI element when it changes and vice-versa. Vue uses the <code>v-model</code> directive for doing these kinds of bindings. You can find more info on form input bindings <a href="https://vuejs.org/v2/guide/forms.html" target="_blank" rel="external">here</a></p>
<h2 id="Computed-Properties"><a href="#Computed-Properties" class="headerlink" title="Computed Properties"></a>Computed Properties</h2><p>You can data-bind to computed properties and Vue will watch dependencies i.e. computed properties are implemented like functions but used like properties. They are also reactive as opposed to ordinary methods. This means that Vue caches result and watches variables so that the function only is called when necessary. More documentation on <a href="https://vuejs.org/v2/guide/computed.html" target="_blank" rel="external">Computed Properties and Watchers </a>. If you know you always want to recalculate when DOM changes you can use an ordinary function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">	propA: 3,</div><div class="line">	probB: 2</div><div class="line">&#125;,</div><div class="line">computed: &#123;</div><div class="line">	sumAB: function () &#123;</div><div class="line">	    return this.propA * this.propB;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Using-the-Watch-object"><a href="#Using-the-Watch-object" class="headerlink" title="Using the Watch object"></a>Using the Watch object</h5><p>In general you should use computer properties instead because they are more optimized. However computed properties need to return immediately meaning you can only do synchronous calls in them. When you need to do an asyncronous call you need to use a watch function.</p>
<h2 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h2><p>v-if adds and removes element and all nested elements from the DOM. Later versions of Vue also have a v-elseif<br>v-else needs to be attached to sibling following v-if</p>
<p>You can wrap elements inside the non-rendered <code>&lt;template&gt;</code> element if you need the <code>v-if</code> to apply to multiple sibling elements without introducing an extra <code>&lt;div&gt;</code> element.</p>
<p>If you only want to show/hide not add/remove elements you can use the <code>v-show</code> element.</p>
<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><p>Vue uses the <code>v-for</code> directive to loop enumerables.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can get the index of item as well. It needs to be the second param. If you want to output multiple non-nested elements you can wrap them inside a <code>&lt;template&gt;</code>.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in items"</span>&gt;</span>&#123;&#123;i&#125;&#125;. &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You could loop through the properties of an object:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in person"</span>&gt;</span>&#123;&#123;key&#125;&#125;: &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Whenever possible, use a unique key attribute when generating list items.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div v-for=&quot;item in items&quot; v-bind:key=&quot;item.id&quot;&gt;</div><div class="line">	&lt;!-- content --&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="Transitions"><a href="#Transitions" class="headerlink" title="Transitions"></a>Transitions</h2><p>Allows us to add effects to UI</p>
<ul>
<li>Vue provides a way to apply transitions when items are inserted, updated or removed from the DOM</li>
<li>Transitions are used in conjunction with directives like v-if v-show etc.</li>
<li>Transitions use the non-rendering component <transition></transition></li>
<li>Vue automatically checks for CSS transitions or animations to apply to target element</li>
<li>Vue applies classes v-enter, v-enter-active, v-leave, v-leave-active</li>
<li>Giving  transition a name will replace the v with the name i.e. myTrans-enter, myTrans-leave</li>
</ul>
<h2 id="The-Vue-JS-instance"><a href="#The-Vue-JS-instance" class="headerlink" title="The Vue JS instance"></a>The Vue JS instance</h2><p>The Vue instance acts as the middle man between our business logic and the DOM. Vue instance common properties: <code>el</code>, <code>data</code>, <code>methods</code>, <code>computed</code> and <code>watch</code>.</p>
<p>A page can contain many Vue instances hooked upp to different elements. A real scenario for this would be when adding some components here and there on an otherwise static page i.e. not typically when building SPAs.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app1" class="app"&gt;</div><div class="line">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div id="app2" class="app"&gt;</div><div class="line">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">...</div><div class="line">new Vue(&#123;</div><div class="line">  el: '#app1',</div><div class="line">  data: &#123; title: 'App #1' &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">  el: '#app2',</div><div class="line">  data: &#123; title: 'App #2' &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The Vue instance can be accessed from outside of the Vue app or from inside another instance if we assign the instances to variables.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;<span class="attr">title</span>: <span class="string">'vm1'</span>&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  vm1.title = <span class="string">'Changed by timer'</span>;</div><div class="line">&#125;, <span class="number">3000</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;<span class="attr">title</span>: <span class="string">'vm2'</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>In the above sample we can read Vue properties. Although you could also add properties like <code>vm2.myOtherTitle = &#39;&#39;;</code> they won’t be reactive. This is because Vue creates getters and setters in the constructor when called.</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$el</code></td>
<td>A reference to the element where the Vue app was mounted</td>
</tr>
<tr>
<td><code>$data</code></td>
<td>Data is an object holding all our data properties. (vm1.title === vm1.$data.title)</td>
</tr>
<tr>
<td><code>$ref</code></td>
<td>Can be used to reference DOM elements</td>
</tr>
<tr>
<td>$mount</td>
<td>Can be used to mount a Vue instance.  Remove el from config and call vm1.$mount(‘#app1’);</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showInfo"</span> <span class="attr">ref</span>=<span class="string">"myButton"</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">...</div><div class="line">var data = this.$refs.myButton.innerHtml();</div></pre></td></tr></table></figure>
<p>You can easily read data but beware that writing goes straight to DOM bypassing Vue. If you want to dive deeper read the <a href="https://vuejs.org/v2/guide/instance.html" target="_blank" rel="external">guide</a> and the <a href="https://vuejs.org/v2/api/" target="_blank" rel="external">API Docs</a>.</p>
<h2 id="Lifecycle-Hooks"><a href="#Lifecycle-Hooks" class="headerlink" title="Lifecycle Hooks"></a>Lifecycle Hooks</h2><ul>
<li>Vue instances goes through a series of initialization steps when created</li>
<li>Sets up data observation, template compilation mount to DOM etc.</li>
<li>Lifecycle hooks gives us opportunity to execute custom logic at each point</li>
<li>Hooks include created, mounted, updated, destroyed etc</li>
</ul>
<p>Check out the <a href="https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram" target="_blank" rel="external">Lifecycle Diagram</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">data</span>: &#123;</div><div class="line">	    <span class="attr">a</span>: <span class="number">1</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	    <span class="built_in">console</span>.log(<span class="string">'a is:'</span> + <span class="keyword">this</span>.a);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>For more info on Vue’s reactivity read the <a href="https://vuejs.org/v2/guide/reactivity.html" target="_blank" rel="external">Guide</a></p>
<h2 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h2><ul>
<li>Used to apply common formatting</li>
<li>Usable in both interpolations and bind expressions</li>
<li>Appended to the end of an expression denoted by the pipe symbol.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;message | capitalize&#125;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formattedId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js&lt;/a&gt; &lt;em&gt;(pronounced /vjuː/, like view)&lt;/em&gt; is a JavaScript library for
    
    </summary>
    
      <category term="Vue" scheme="http://kajlund.net/categories/Vue/"/>
    
    
      <category term="javascript" scheme="http://kajlund.net/tags/javascript/"/>
    
      <category term="frameworks" scheme="http://kajlund.net/tags/frameworks/"/>
    
      <category term="spa" scheme="http://kajlund.net/tags/spa/"/>
    
      <category term="vue" scheme="http://kajlund.net/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Hapi intro</title>
    <link href="http://kajlund.net/2016/07/08/hapi-intro/"/>
    <id>http://kajlund.net/2016/07/08/hapi-intro/</id>
    <published>2016-07-08T15:25:30.000Z</published>
    <updated>2017-06-17T18:29:55.233Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="http://hapijs.com/" target="_blank" rel="external">hapi</a> is an Open Source Web Application Framework for NodeJS developed by a team at Walmart Labs lead by Eran Hammer.</li>
<li>Configuration Over Code -&gt; Less time configuring server, more time building app.</li>
<li>Hapi is used by companies like PayPal, Yahoo, Disney, macys, Mozilla and npm.</li>
</ul>
<blockquote>
<p>hapi was created around the idea that configuration is better than code, that business logic must be isolated from the transport layer, and that native node constructs like buffers and streams should be supported as first class objects. But most importantly, it was created to provide a modern, comprehensive environment in which as much of the effort is spent delivering business value.<br>– Eran Hammer (creator of hapi)</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">npm install --save hapi</div></pre></td></tr></table></figure>
<h2 id="Hello-World-Server"><a href="#Hello-World-Server" class="headerlink" title="Hello World Server"></a>Hello World Server</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Hapi = <span class="built_in">require</span>(<span class="string">'hapi'</span>);</div><div class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> Hapi.Server();</div><div class="line"></div><div class="line">server.connection(&#123;<span class="attr">port</span>: <span class="number">3000</span>&#125;);</div><div class="line"></div><div class="line">server.route(&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/hello'</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">        reply(<span class="string">'Hello World'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.start(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">throw</span> err;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Server running at <span class="subst">$&#123;server.info.uri&#125;</span>`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>To run it open a CLI in your peoject folder and run <code>node server.js</code>, then browse to <a href="http://localhost:3000/hello" target="_blank" rel="external">http://localhost:3000/hello</a>.</p>
<h2 id="The-Server-Object"><a href="#The-Server-Object" class="headerlink" title="The Server Object"></a>The Server Object</h2><p>All routes, methods and plugins are an extension of the Server object.</p>
<h3 id="The-Server-Constructor"><a href="#The-Server-Constructor" class="headerlink" title="The Server Constructor"></a>The Server Constructor</h3><p>Optional Config object: see <a href="http://hapijs.com/api#server" target="_blank" rel="external">API Doc</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hapi = <span class="built_in">require</span>(<span class="string">'hapi'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> Hapi.server( &#123;</div><div class="line">    <span class="attr">cache</span>: <span class="built_in">require</span>(<span class="string">'catbox-memory'</span>),</div><div class="line">    <span class="attr">files</span>: &#123;</div><div class="line">        <span class="attr">etagsCacheMaxSize</span>: <span class="number">20000</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="The-Connection-method"><a href="#The-Connection-method" class="headerlink" title="The Connection method"></a>The Connection method</h3><p>Connection Config object: see <a href="http://hapijs.com/api#serverconnectionoptions" target="_blank" rel="external">API Doc</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mainServer = server.connection( &#123;</div><div class="line">    <span class="attr">port</span>: <span class="number">8000</span>,</div><div class="line">    <span class="attr">cache</span>: &#123;</div><div class="line">        <span class="attr">statuses</span>: [<span class="number">200</span>, <span class="number">404</span>],</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">labels</span>: <span class="string">'main'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="The-server-ext-function"><a href="#The-server-ext-function" class="headerlink" title="The server.ext function"></a>The server.ext function</h3><p>Register handlers for certain events in the request life-cycle. See <a href="http://hapijs.com/api#serverextevent-method-options" target="_blank" rel="external">API Doc</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//onRequest, onPreAuth, onPostAuth, onPreHandler, onPostHandler, onPreResponse</span></div><div class="line">server.ext(<span class="string">'onRequest'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Incoming request at '</span> + request.path);</div><div class="line">    reply.continue();</div><div class="line">&#125;);</div><div class="line">server.ext(<span class="string">'onPreResponse'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Responding'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Response: '</span> + request.response);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><p>Each <a href="http://hapijs.com/api#serverrouteoptions" target="_blank" rel="external">route</a> is defined by a <a href="http://hapijs.com/api#route-configuration" target="_blank" rel="external">route configuration</a> object containing <a href="http://hapijs.com/api#path-parameters" target="_blank" rel="external">path</a>, method and handler.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server.route(&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,	<span class="comment">//must begin with /</span></div><div class="line">    method: <span class="string">'GET'</span>, <span class="comment">// string, array ['GET', 'PUT'] or * - HEAD not supported</span></div><div class="line">    handler: &#123; <span class="comment">//Anonymous or named function or object with preset handler properties</span></div><div class="line">        file: <span class="string">'templates/index.html'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.route(&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/assets/&#123;path*&#125;'</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="attr">handler</span>: &#123;</div><div class="line">        <span class="attr">directory</span>: &#123;</div><div class="line">            <span class="attr">path</span>: <span class="string">'./public'</span>,</div><div class="line">            <span class="attr">listing</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="The-Request-Object"><a href="#The-Request-Object" class="headerlink" title="The Request Object"></a>The Request Object</h3><p>Encapsuled data about the incoming request.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//requested URL /api/customers/1?showAddress=false</span></div><div class="line">server.route(&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/api/customers/&#123;id&#125;'</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">    	<span class="comment">//request.params.id = 1</span></div><div class="line">        <span class="comment">//request.query.showAddress = false</span></div><div class="line">        <span class="comment">//request.auth.isAuthenticated, request.auth.credentials.email</span></div><div class="line">        <span class="comment">//request.info -&gt; contains more metainfo about request</span></div><div class="line">        <span class="comment">//request.info.remoteAddress -&gt; client IP address</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="The-Reply-interface"><a href="#The-Reply-interface" class="headerlink" title="The Reply interface"></a>The Reply interface</h3><p>Give control back to server for replying and for constructing the response.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">handler: <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">    reply(); <span class="comment">// give back control. Server responds with 200 status only</span></div><div class="line">    reply(<span class="string">'Hello World!'</span>); <span class="comment">//replies with string Hello World!</span></div><div class="line">    <span class="comment">// Using Response Object, set content type, headers etc</span></div><div class="line">    <span class="keyword">var</span> response = reply(<span class="string">'Hello World!'</span>);</div><div class="line">    response.statusCode = <span class="number">123</span>;</div><div class="line">    response.charset(<span class="string">'utf-8'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="reply-file"><a href="#reply-file" class="headerlink" title="reply.file"></a>reply.file</h4><p>Takes a path as argument and returns that file as a response. Useful when you have to do business logic before responding with a file.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handler: <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">    reply.file(<span class="string">'/templates/index.html'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="reply-redirect"><a href="#reply-redirect" class="headerlink" title="reply.redirect"></a>reply.redirect</h4><p>Takes a URL as argument and redirect client to the passed URL. Useful when you POST and DELETEs on a website.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handler: <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">    <span class="comment">// business logic</span></div><div class="line">    reply.redirect(<span class="string">'/customers'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="reply-view"><a href="#reply-view" class="headerlink" title="reply.view"></a>reply.view</h4><p>Takes template name string param and optional context object. Used after registering a view engine with the server.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handler: <span class="function"><span class="keyword">function</span> (<span class="params">request, reply</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = &#123;<span class="attr">companyName</span>: <span class="string">'Attracs'</span>&#125;;</div><div class="line">    reply.view(<span class="string">'customer'</span>, data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="reply-proxy"><a href="#reply-proxy" class="headerlink" title="reply.proxy"></a>reply.proxy</h4><p>Generates a reverse proxy handler. Take a look at the proxy option in the documentation for <a href="http://hapijs.com/api#built-in-handlers" target="_blank" rel="external">Built-in Handlers</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">handler: &#123;</div><div class="line">    <span class="attr">proxy</span>: &#123;</div><div class="line">        <span class="comment">//or uri: 'http://...'</span></div><div class="line">        host: <span class="string">'my-other-service.mydomain.com'</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">80</span>,</div><div class="line">        <span class="attr">protocol</span>: <span class="string">'http'</span>,</div><div class="line">        <span class="attr">passThrough</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">xforward</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>More <a href="http://blog.abcedmindedness.com/2015/03/hapijs-for-proxy-routes-and-mapuri.html" target="_blank" rel="external">here</a></p>
<h2 id="Templating"><a href="#Templating" class="headerlink" title="Templating"></a>Templating</h2><h3 id="Registering-a-View-Engine"><a href="#Registering-a-View-Engine" class="headerlink" title="Registering a View Engine"></a>Registering a View Engine</h3><p>You can use Handlebars, Jade, Swig, Ejs, Hogan and Underscore among other templating libraries.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server.views(&#123;</div><div class="line">    <span class="attr">engines</span>: &#123;</div><div class="line">        <span class="attr">html</span>: <span class="built_in">require</span>(<span class="string">'jade'</span>),</div><div class="line">        <span class="attr">handlebars</span>: <span class="built_in">require</span>(<span class="string">'handlebars'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">path</span>: <span class="string">'./templates'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Common-Plugins"><a href="#Common-Plugins" class="headerlink" title="Common Plugins"></a>Common Plugins</h2><ul>
<li><a href="https://github.com/hapijs/boom" target="_blank" rel="external">Boom</a> - HTTP-friendly error objects</li>
<li><a href="https://github.com/hapijs/good" target="_blank" rel="external">Good</a> is a hapi process monitoring library</li>
<li><a href="https://github.com/hapijs/joi" target="_blank" rel="external">Joi</a> is an object schema validation library.</li>
<li><a href="https://github.com/hapijs/wreck" target="_blank" rel="external">Wreck</a> is an http utility library</li>
<li><a href="https://github.com/glennjones/hapi-swagger" target="_blank" rel="external">hapi-swagger</a> is a <a href="http://swagger.io/" target="_blank" rel="external">swagger</a> interface for hapi.</li>
<li><a href="https://github.com/hapijs/vision" target="_blank" rel="external">vision</a> provides template rendering support for hapi.</li>
<li><a href="https://github.com/hapijs/glue" target="_blank" rel="external">glue</a> - Server composer for hapi.js</li>
<li><a href="https://github.com/hapijs/inert" target="_blank" rel="external">inert</a> is a static file and directory handlers plugin for hapi.js.</li>
<li><a href="https://github.com/danielb2/blipp" target="_blank" rel="external">Blipp</a> is  a simple hapi plugin to display the routes table at startup</li>
</ul>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>I’ll do a separate post on this one day. For now I’ll just list some resources:</p>
<ul>
<li>[Lab](<a href="https://github.com/hapijs/lab" target="_blank" rel="external">https://github.com/hapijs/lab</a> is a testrunner often used with hapi.</li>
<li><a href="https://github.com/hapijs/code" target="_blank" rel="external">Code</a> assertion library<br><a href="https://medium.com/the-spumko-suite/testing-hapi-services-with-lab-96ac463c490a" target="_blank" rel="external">Testing Hapi Services with Lab</a><br><a href="http://robjoh.com/testing-a-server-request-with-hapi-and-lab/" target="_blank" rel="external">Testing backend requests with hapi and lab</a></li>
</ul>
<h2 id="Other-Resources"><a href="#Other-Resources" class="headerlink" title="Other Resources"></a>Other Resources</h2><ul>
<li><a href="http://manning.com/harrison" target="_blank" rel="external">hapi.js in Action</a> book and <a href="https://github.com/mtharrison/Hapi.js-in-action" target="_blank" rel="external">repo</a></li>
<li><a href="http://shop.oreilly.com/product/9781939902207.do" target="_blank" rel="external">Developing a hapi edge</a> book and it’s <a href="https://github.com/hapijs-edge/hapi-plugins.com" target="_blank" rel="external">repo</a>.</li>
<li><a href="https://github.com/caolan/async" target="_blank" rel="external">async</a> library</li>
<li><a href="http://matt-harrison.com/using-hapi-js-with-socket-io/" target="_blank" rel="external">Using hapi.js with Socket.io</a></li>
<li><a href="https://gist.github.com/agendor/9922151" target="_blank" rel="external">A practical introduction to building a RESTful API with the hapi.js server framework for Node.js<br>Raw</a></li>
<li><a href="https://github.com/johnbrett/Getting-Started-with-hapi.js" target="_blank" rel="external">Getting started with hapi.js Repo</a></li>
<li><a href="https://github.com/hapijs/contrib/blob/master/Style.md" target="_blank" rel="external">hapi Coding Conventions</a></li>
<li>Getting started with hapi.js book <a href="https://github.com/johnbrett/Getting-Started-with-hapi.js" target="_blank" rel="external">sample code repo</a></li>
<li>FutureStudio has great <a href="https://futurestud.io/blog/tag/hapi" target="_blank" rel="external">posts on hapi</a></li>
<li><a href="https://hapibook.jjude.com/" target="_blank" rel="external">hapi with TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hapijs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hapi&lt;/a&gt; is an Open Source Web Application Framework for NodeJS develop
    
    </summary>
    
      <category term="Frameworks" scheme="http://kajlund.net/categories/Frameworks/"/>
    
    
      <category term="frameworks" scheme="http://kajlund.net/tags/frameworks/"/>
    
      <category term="hapi" scheme="http://kajlund.net/tags/hapi/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://kajlund.net/2016/04/25/typescript/"/>
    <id>http://kajlund.net/2016/04/25/typescript/</id>
    <published>2016-04-25T15:25:30.000Z</published>
    <updated>2017-06-11T12:53:11.973Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Is a superset of ECMAScript</li>
<li>Allow definition of strong types</li>
<li>Understands the basics of JavaScript types</li>
</ul>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g typescript</div><div class="line">tsc -v</div></pre></td></tr></table></figure>
<h3 id="Setting-Up-VS-Code-for-TypeScript"><a href="#Setting-Up-VS-Code-for-TypeScript" class="headerlink" title="Setting Up VS Code for TypeScript"></a>Setting Up VS Code for TypeScript</h3><ul>
<li>Create a folder</li>
<li>Open folder with VS Code</li>
<li>Create TypeScript Configuration File (tsconfig.json)</li>
<li>Configure Task Runner</li>
</ul>
<h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><p>tsconfig.json is a json file that defines the options for the tsc compiler. The prescense of this file in a folder indicates that it is the root folder of a TypeScript project.</p>
<p>Typescript Build in VS Code Ctrl+Shit+B -&gt; Configure Task Runner creates .settings/tasks.json</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"compilerOptions"</span>: &#123;</div><div class="line">		<span class="string">"target"</span>: <span class="string">"ES5"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Configure-Task-Runner"><a href="#Configure-Task-Runner" class="headerlink" title="Configure Task Runner"></a>Configure Task Runner</h3><p>In VS Code press <code>Ctrl-Shift-B</code> to build. If there is no build task has been configured you’ll get a dialog containing a button to create a default one by clicking <code>Configure Task Runner</code>.</p>
<p>In VS Code automation tasks will be stored in a file called <code>tasks.json</code> in the <code>.vscode</code> folder.</p>
<h2 id="Installing-Angular-Type-Definitions"><a href="#Installing-Angular-Type-Definitions" class="headerlink" title="Installing Angular Type Definitions"></a>Installing Angular Type Definitions</h2><p>From a CLI in the project root folder type:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tsd install angular --resolve --save</div></pre></td></tr></table></figure>
<p>This will install type definitions for both angular and jQuery.</p>
<h2 id="Some-Resources"><a href="#Some-Resources" class="headerlink" title="Some Resources"></a>Some Resources</h2><ul>
<li><a href="http://www.typescriptlang.org/" target="_blank" rel="external">Website</a></li>
<li><a href="http://definitelytyped.org/" target="_blank" rel="external">Definitely Typed</a> - The repository for high quality TypeScript type definitions</li>
<li><a href="https://app.pluralsight.com/library/courses/angular-typescript/table-of-contents" target="_blank" rel="external">Kurata Pluralsight Course</a></li>
<li><a href="https://www.gitbook.com/book/basarat/typescript/details" target="_blank" rel="external">TypeScript Deep Dive</a></li>
<li><a href="http://blog.teamtreehouse.com/getting-started-typescript" target="_blank" rel="external">Getting Started with TypeScript</a></li>
<li><a href="https://www.packtpub.com/web-development/mastering-typescrip" target="_blank" rel="external">Mastering TypeScript</a></li>
<li><a href="http://alm.tools/" target="_blank" rel="external">ALM</a> - A cloud ready IDE for TypeScript</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Is a superset of ECMAScript&lt;/li&gt;
&lt;li&gt;Allow definition of strong types&lt;/li&gt;
&lt;li&gt;Understands the basics of JavaScript types&lt;/li&gt;
&lt;/ul
    
    </summary>
    
      <category term="TypeScript" scheme="http://kajlund.net/categories/TypeScript/"/>
    
    
      <category term="typescript" scheme="http://kajlund.net/tags/typescript/"/>
    
      <category term="languages" scheme="http://kajlund.net/tags/languages/"/>
    
  </entry>
  
  <entry>
    <title>Angular Routing with ui-router</title>
    <link href="http://kajlund.net/2015/09/29/angular-ui-router/"/>
    <id>http://kajlund.net/2015/09/29/angular-ui-router/</id>
    <published>2015-09-29T15:25:30.000Z</published>
    <updated>2017-06-11T13:05:47.723Z</updated>
    
    <content type="html"><![CDATA[<p>UI-Router is a state based library as opposed to the default routing library that is URL-based. Using ngRoute a route is always associated with a particular URL. In UI-router states can exist without a URL. States can also be nested.</p>
<blockquote>
<p>A state is a combination of a controller and a view that can exist independently from any particular URL - A state is a “place” in an application.</p>
</blockquote>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>There are a couple of ways to install</p>
<ul>
<li>Install via package manager <code>bower install angular-ui-router</code> or <code>npm install angular-ui-router</code> or <code>jspm install angular-ui-router</code></li>
<li>Use a CDN like Cloudflare</li>
<li>Download from the github project</li>
</ul>
<h3 id="Setup-UI-Router"><a href="#Setup-UI-Router" class="headerlink" title="Setup UI_Router"></a>Setup UI_Router</h3><p>Once you have access to the JavaScript file you need to add ui.router as a module dependency and add the ui-view dircetive to your html.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>UI-Router demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"libs/angular.js/1.4.6/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"libs/angular-ui-router/0.2.15/angular-ui-router.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    angular.module(<span class="string">'app'</span>, [<span class="string">'ui.router'</span>]);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="Configuring-States"><a href="#Configuring-States" class="headerlink" title="Configuring States"></a>Configuring States</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> angular.module(<span class="string">'app'</span>).config(configRoutes);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configRoutes</span>(<span class="params">$stateProvider, $urlRouterProvider</span>) </span>&#123;</div><div class="line">    $urlRouterProvider.otherwise(<span class="string">'/'</span>);</div><div class="line"></div><div class="line">    $stateProvider</div><div class="line">        .state(<span class="string">'home'</span>, &#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">'/'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="string">'HomeController'</span>,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'app/home.html'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="comment">//allMyData will be injected into HomeController if promise resolved</span></div><div class="line">                allMyData: <span class="function"><span class="keyword">function</span> (<span class="params">dataService</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> dataService.getAllMyData();</div><div class="line">                    <span class="comment">//throw 'Emulate state change failure'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The command <code>$urlRouterProvider.otherwise(&#39;/&#39;)</code> defines a “catch all” route making sure that if a user enters an invalid URL (invalid state or invalid param value) he will be routed to ‘/’.</p>
<blockquote>
<p>Since the views are bound to states you don’t have to provide a URL (no change in address bar) to change the view but that might also be confusing in some cases.</p>
</blockquote>
<h3 id="Activating-States"><a href="#Activating-States" class="headerlink" title="Activating States"></a>Activating States</h3><p>In JavaScript code you would use <code>$state.go(&#39;home&#39;);</code> to change to the home state. In templates you can use both normal href links <code>&lt;a href=&quot;/home&quot;&gt;Home&lt;/a&gt;</code> and the ui-sref directive <code>&lt;a ui-sref=&quot;home&quot;&gt;Home&lt;/a&gt;</code>. If the state doesn’t have a particular URL you must obviously use the ui-sref directive.</p>
<h2 id="Using-the-state-Service"><a href="#Using-the-state-Service" class="headerlink" title="Using the $state Service"></a>Using the $state Service</h2><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$state.go()     - $state.go(&apos;statename&apos;, &#123;id: 1, another: &apos;two&apos;&#125;);</div><div class="line">$state.reload() - reloads the current state</div><div class="line">$state.get()    - retrieve a state object by name or all states</div></pre></td></tr></table></figure>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul>
<li>current - currently active state</li>
<li>params  - object containing params for current state</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyController</span> (<span class="params">$state, $log, allMyData</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">        vm.data = allMyData;</div><div class="line">    $log.debug(<span class="string">'Activated state '</span>, $state.current);</div><div class="line"></div><div class="line">    vm.refresh = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $log.debug(<span class="string">'Reloaded state '</span>, $state.current);</div><div class="line">        $state.reload();</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><ul>
<li>$stateChangeError</li>
<li>$stateChangeStart</li>
<li>$stateChangeSuccess</li>
<li>$stateNotFound</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runApp</span> (<span class="params">$rootScope, $log</span>) </span>&#123;</div><div class="line">    $rootScope.$on(<span class="string">'$stateChangeSuccess'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, toState, toParams, fromState, fromParams</span>) </span>&#123;</div><div class="line">        $log.debug(<span class="string">'Successfully changed state: '</span>);</div><div class="line"></div><div class="line">        $log.debug(<span class="string">'event'</span>, event);</div><div class="line">        $log.debug(<span class="string">'toState'</span>, toState);</div><div class="line">        $log.debug(<span class="string">'toParams'</span>, toParams);</div><div class="line">        $log.debug(<span class="string">'fromState'</span>, fromState);</div><div class="line">        $log.debug(<span class="string">'fromParams'</span>, fromParams);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $rootScope.$on(<span class="string">'$stateNoFound'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, unfoundState, fromState, fromParams</span>) </span>&#123;</div><div class="line">        $log.debug(<span class="string">'Requested state not found: '</span>, unfoundState);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $rootScope.$on(<span class="string">'$stateChangeError'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, toState, toParams, fromState, fromParams, error</span>) </span>&#123;</div><div class="line">        $log.debug(<span class="string">'An error occurred while changing state: '</span>, error);</div><div class="line"></div><div class="line">        $log.debug(<span class="string">'event'</span>, event);</div><div class="line">        $log.debug(<span class="string">'toState'</span>, toState);</div><div class="line">        $log.debug(<span class="string">'toParams'</span>, toParams);</div><div class="line">        $log.debug(<span class="string">'fromState'</span>, fromState);</div><div class="line">        $log.debug(<span class="string">'fromParams'</span>, fromParams);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="State-Parameters"><a href="#State-Parameters" class="headerlink" title="State Parameters"></a>State Parameters</h2><p>You can declare state params in the url param of the route configuration:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'tripdetail'</span>, &#123;</div><div class="line">   <span class="attr">url</span>: <span class="string">'/tripdetail/:id'</span></div><div class="line">&#125;)</div><div class="line">...</div><div class="line"></div><div class="line">function TripDetailController ($stateParams) &#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.tripId = $stateParams.id;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With UI-Router there are also other options:</p>
<p>Using curly braces works the same way but allows you to enter a regex. The parameter will only be set if it matches the regex.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'tripdetail'</span>, &#123;</div><div class="line">   <span class="attr">url</span>: <span class="string">'/tripdetail/&#123;id:[0-9]&#125;'</span></div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>The third option is to use the params property on the state configuration object. This allows you to give default values to the params or to declare params that doesn’t exist in the URL.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'tripdetail'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/tripdetail/&#123;id:[0-9]&#125;'</span>,</div><div class="line">    <span class="attr">params</span>: &#123;</div><div class="line">        <span class="attr">secretMessage</span>: &#123;<span class="attr">value</span>: <span class="string">'Shhh!'</span>&#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">...</div><div class="line"></div><div class="line">function TripDetailController ($stateParams) &#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.tripId = $stateParams.id;</div><div class="line">    vm.message = $stateParams.secretMessage; <span class="comment">// cannot be passed via URL</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In templates you pass route parameters in an object literal as a parameter to the ui-sref state value <code>&lt;a ui-sref=&quot;tripdetail({id: 1234, secretMessage: &#39;New message&#39;})&quot;&gt;Detail&lt;/a&gt;</code></p>
<p>In code you pass an object literal as the second argument to the $state.go function <code>$state.go({id: 1234, secretMessage: &#39;New message&#39;});</code>.</p>
<h3 id="Additional-State-Configuration-Properties"><a href="#Additional-State-Configuration-Properties" class="headerlink" title="Additional State Configuration Properties"></a>Additional State Configuration Properties</h3><p>Similar to the ngRoute resolve property you call a function returning a promise. The promise must be resolved before the state change will occur. The name of the resolve function is what you will inject to the controller.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'triplist'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/trips'</span>,</div><div class="line">    <span class="attr">resolve</span>: &#123;</div><div class="line">        <span class="attr">trips</span>: <span class="function"><span class="keyword">function</span> (<span class="params">dataService</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> dataService.getAllTrips();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>You can also assign data to the states. You don’t need to call it data but it is a convention. State data is inherited by child-states:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'triplist'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/trips'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Trip List'</span>,</div><div class="line">        <span class="attr">desc</span>: <span class="string">'Whatever'</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">...</div><div class="line">$log.debug($state.current.data);</div></pre></td></tr></table></figure>
<p>Templates can be assigned via a function to the templateUrl property which makes it easy to dynamically determine what template to use. You can also use the injectable templateProvider property. Controllers have similar options.</p>
<p>The onEnter and onExit properties can hold callback functions that will execute when a state is entered or exited.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'triplist'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/trips'</span>,</div><div class="line">    <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">$log</span>) </span>&#123;</div><div class="line">        $log.debug(<span class="string">'Entering triplist state'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">onExit</span>: <span class="function"><span class="keyword">function</span> (<span class="params">$log</span>) </span>&#123;</div><div class="line">        $log.debug(<span class="string">'Exiting triplist state'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="Nested-States-and-Views"><a href="#Nested-States-and-Views" class="headerlink" title="Nested States and Views"></a>Nested States and Views</h2><p>Combined these features allow you to build complex views from simpler parts. nested states works a bit like inheritance where child states inherit from parent states.</p>
<p>For nested states, state properties including the URL is inherited to child states.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'book'</span>, &#123;</div><div class="line">    <span class="attr">abstract</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">'/book/:id'</span>,</div><div class="line">    <span class="attr">resolve</span>: &#123;&#125;,</div><div class="line">    <span class="attr">data</span>: &#123;&#125;,</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;div ui-view&gt;'</span></div><div class="line">&#125;)</div><div class="line">.state(<span class="string">'book.summary'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/summary'</span>,</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'book.summary'</span></div><div class="line">&#125;)</div><div class="line">.state(<span class="string">'bookDetail'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/detail'</span>,</div><div class="line">    <span class="attr">parent</span>: <span class="string">'book'</span>, <span class="comment">// or book state object</span></div><div class="line">    templateUrl: <span class="string">'book.detail.html'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>To define a child state you either repeat the parent state name, followed by a dot, followed by the child state name like above. You can also instead add the property parent to the child state definition and give it a string or literal value of the parent state.</p>
<p>The view templates defined in child view definitions will be rendered in their parent’s view template’s ui-view directive, not in the ui-view directive defined for the app.</p>
<h3 id="Abstract-States"><a href="#Abstract-States" class="headerlink" title="Abstract States"></a>Abstract States</h3><p>A specialiced version of parent state that can’t be activated directly. They are implicitly activated by activating any of their child states. If an abstact state specifies a URL any child state’s URL will be prepended with it. It can be used as an abstraction for gathering resolves and data you wish to be available in all child states. You can also use it for sharing part of the view for all child states.</p>
<h3 id="Multiple-Named-Views"><a href="#Multiple-Named-Views" class="headerlink" title="Multiple Named Views"></a>Multiple Named Views</h3><p>Allows you to define multiple views for a single state. This can be useful for separating views and controllers to keep them smaller and more maintainable and also if you need to reuse part of a view in different places throughout your app. You do this by defining a views object on the state configuration object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'book'</span>, &#123;</div><div class="line">    <span class="attr">abstract</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'app/book.html'</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">'/book/:id'</span>,</div><div class="line">    <span class="attr">resolve</span>: &#123;&#125;,</div><div class="line">    <span class="attr">data</span>: &#123;&#125;</div><div class="line">&#125;)</div><div class="line">.state(<span class="string">'book.summary'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/summary'</span>,</div><div class="line">    <span class="attr">views</span>: &#123;</div><div class="line">        <span class="string">'bookSummary'</span>: &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'app/book.summary.html'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">.state(<span class="string">'bookDetail'</span>, &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/detail'</span>,</div><div class="line">    <span class="attr">parent</span>: <span class="string">'book'</span>, <span class="comment">// or book state object</span></div><div class="line">    views: &#123;</div><div class="line">        <span class="string">'bookSummary'</span>: &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'app/book.summary.html'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'bookDetail'</span>: &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'app/book.detail.html'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>and the template book.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I will be here for all my children<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"bookSummary"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"bookDetail"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UI-Router is a state based library as opposed to the default routing library that is URL-based. Using ngRoute a route is always associate
    
    </summary>
    
      <category term="AngularJS" scheme="http://kajlund.net/categories/AngularJS/"/>
    
    
      <category term="angular" scheme="http://kajlund.net/tags/angular/"/>
    
      <category term="routing" scheme="http://kajlund.net/tags/routing/"/>
    
  </entry>
  
  <entry>
    <title>Angular Routing with ng-route</title>
    <link href="http://kajlund.net/2015/09/28/angular-ng-route/"/>
    <id>http://kajlund.net/2015/09/28/angular-ng-route/</id>
    <published>2015-09-28T15:23:23.000Z</published>
    <updated>2017-06-11T13:06:05.197Z</updated>
    
    <content type="html"><![CDATA[<p><a href="(http://www.pluralsight.com/courses/angular-routing-in-depth">Course page on Pluralsight</a>)</p>
<p>ngRoute is the default router used by AngularJS and it is URL-based as opposed to the state based alternative UI-Router</p>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><h5 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h5><p>There are a couple of ways to install</p>
<ul>
<li>Install via package manager <code>bower install angular-route</code> or <code>npm install angular-route</code></li>
<li>Using <a href="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular-route.js" target="_blank" rel="external">Googles CDN</a> or <a href="https://cdnjs.com/libraries/angular.js" target="_blank" rel="external">CDNJS</a></li>
<li>Download any version directly from the <a href="https://code.angularjs.org" target="_blank" rel="external">AngularJS site</a></li>
</ul>
<h5 id="Setup-ngRoute"><a href="#Setup-ngRoute" class="headerlink" title="Setup ngRoute"></a>Setup ngRoute</h5><p>Once you have access to the JavaScript file you need to add <code>ngRoute</code> as a module dependency and add the <code>ng-view</code> dircetive to your html.</p>
<ul>
<li>reference in html file: <code>&lt;script src=&quot;lib/angular-route.js&quot;&gt;&lt;/script&gt;</code></li>
<li>add module dependency in app module: <code>angular.module(&#39;app&#39;, [&#39;ngRoute&#39;]);</code></li>
<li>add ng-view directive to html page: <code>&lt;div ng-view&gt;&lt;/div&gt;</code></li>
</ul>
<h2 id="Configuring-Routes"><a href="#Configuring-Routes" class="headerlink" title="Configuring Routes"></a>Configuring Routes</h2><p>Services are configured via their providers inside a module config function. For ngRoute the provider is called $routeProvider.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>]);</div><div class="line">angular.module(<span class="string">'app'</span>).config(<span class="function"><span class="keyword">function</span> (<span class="params">$logProvider, $routeProvider</span>) </span>&#123;</div><div class="line">    $logProvider.debugEnabled(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    $routeProvider</div><div class="line">        .when(<span class="string">'/'</span>, &#123;</div><div class="line">            <span class="attr">controller</span>: <span class="string">'HomeController'</span>, <span class="comment">// alt 'HomeController as vm'</span></div><div class="line">            controllerAs: <span class="string">'vm'</span>,</div><div class="line">            <span class="comment">// template: '&lt;h1&gt;Hello World!&lt;/h1&gt;',</span></div><div class="line">            templateUrl: <span class="string">'app/home/home.html'</span>,</div><div class="line">            <span class="attr">caseInsesitiveMatch</span>: <span class="literal">true</span></div><div class="line">        &#125;)</div><div class="line">        .when(<span class="string">'/this'</span>, &#123; <span class="attr">redirectTo</span>: <span class="string">'/that'</span>&#125;)</div><div class="line">        .when(<span class="string">'/that/:id'</span>, &#123;</div><div class="line">            <span class="attr">redirectTo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">params, currPath, currSearch</span>) </span>&#123;</div><div class="line">               <span class="built_in">console</span>.log(params);</div><div class="line">               <span class="built_in">console</span>.log(currPath);</div><div class="line">               <span class="built_in">console</span>.log(currSearch);</div><div class="line">               <span class="keyword">return</span> <span class="string">'/'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .otherwise(<span class="string">'/'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Using-the-route-Service"><a href="#Using-the-route-Service" class="headerlink" title="Using the $route Service"></a>Using the $route Service</h2><h5 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h5><ul>
<li>reload() -reloads the current route</li>
<li>updateParams(newParams) - reload using new route params</li>
</ul>
<h5 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h5><ul>
<li>current - can examine controller, scope and vars</li>
<li>routes - contains all route definitions for the app</li>
</ul>
<h5 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h5><ul>
<li>$routeChangeStart</li>
<li>$routeChangeSuccess</li>
<li>$routeChangeError</li>
<li>$routeUpdate</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>)</div><div class="line">    controller(<span class="string">'HomeController'</span>, HomeController);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">HomeController</span> (<span class="params">$route, $log</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    vm.refresh = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $log.debug($route.current);</div><div class="line">        $log.debug($route.routes);</div><div class="line">        $route.reload();</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>)</div><div class="line">    run(<span class="function"><span class="keyword">function</span> (<span class="params">$rootScope, $log</span>) </span>&#123;</div><div class="line">        $rootScope.$on(<span class="string">'$routeChangeSuccess'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, current, previous</span>) </span>&#123;</div><div class="line">            $log.debug(<span class="string">'Successfully changed route'</span>);</div><div class="line">            $log.debug(event);</div><div class="line">            $log.debug(current);</div><div class="line">            $log.debug(previous);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $rootScope.$on(<span class="string">'$routeChangeError'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, current, previous, rejection</span>) </span>&#123;</div><div class="line">            $log.debug(<span class="string">'Error changing route'</span>);</div><div class="line">            $log.debug(event);</div><div class="line">            $log.debug(current);</div><div class="line">            $log.debug(previous);</div><div class="line">            $log.debug(rejection);  <span class="comment">// Why did it fail?</span></div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="Route-Parameters"><a href="#Route-Parameters" class="headerlink" title="Route Parameters"></a>Route Parameters</h2><p>The $routeParams service holds information on paramaters. You can have several and they can be optional by adding the question mark as a postfix.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .when('/test/:myVar')</span></div><div class="line"><span class="comment">// .when('/test/:myVar/other/:that?')</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> myVar = $routeParams.myVar,</div><div class="line">    that = $routeParams.that;</div><div class="line"></div><div class="line"><span class="comment">// You can check for params if different routes share controller</span></div><div class="line"><span class="keyword">if</span> ($routeParams.that) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="The-Location-Service"><a href="#The-Location-Service" class="headerlink" title="The Location Service"></a>The Location Service</h5><p>Use to get or set values in address bar.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vm.search = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newUrl = <span class="string">'/this/'</span> + vm.myVar + <span class="string">'/other/'</span> + $routeParams.that;</div><div class="line">    $location.url(newUrl);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="The-resolve-property"><a href="#The-resolve-property" class="headerlink" title="The resolve property"></a>The resolve property</h5><ul>
<li>List of dependencies to inject into the controller</li>
<li>If returning promise the promise must be resolved before transition can take place</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.when(<span class="string">'/'</span>, &#123;</div><div class="line">    <span class="attr">controller</span>: <span class="string">'HomeController'</span>,</div><div class="line">    <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'app/home.html'</span>,</div><div class="line">    <span class="attr">resolve</span>: &#123;</div><div class="line">        <span class="attr">dataList</span>: <span class="function"><span class="keyword">function</span> (<span class="params">dataService</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> dataService.getAllData();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">HomeController</span> (<span class="params">dataList</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">        vm.dataList = dataList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="URL-Formats"><a href="#URL-Formats" class="headerlink" title="URL Formats"></a>URL Formats</h2><p>Default mode is called hashbang mode and looks like <a href="http://localhost:3000/#/home" target="_blank" rel="external">http://localhost:3000/#/home</a>. Everything to the right of the hash symbol belongs to client side routing handled by Angular.</p>
<p>The alternative is called HTML5 mode and looks like <a href="http://localhost:3000/home" target="_blank" rel="external">http://localhost:3000/home</a>. In HTML5 mode angular attempts to use the browser’s HTML5 History API. With some configuration Angular can handle url changes even without the hash sign.</p>
<table>
<thead>
<tr>
<th>Hashbang Mode</th>
<th>HTML 5 Mode</th>
</tr>
</thead>
<tbody>
<tr>
<td>Default mode</td>
<td>Must be configured with $locationProvider</td>
</tr>
<tr>
<td>All URLs contain #</td>
<td>No # sign except in older browsers not supporting HTML5 History API</td>
</tr>
<tr>
<td>Links are not rewritten</td>
<td>Links with # are rewritten without the # in modern browsers</td>
</tr>
<tr>
<td>No server-side config</td>
<td>Servers must rewrite links to application entry point</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>)</div><div class="line">    .config(<span class="function"><span class="keyword">function</span> (<span class="params">$locationProvider</span>) </span>&#123;</div><div class="line">        <span class="comment">//$locationProvider.hashPrefix('!'); // True hashbang mode #!/</span></div><div class="line">        $locationProvider.html5Mode(<span class="literal">true</span>); <span class="comment">//or</span></div><div class="line">        $locationProvider.html5Mode(&#123;</div><div class="line">            <span class="attr">enabled</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">requireBase</span>: <span class="literal">true</span>, <span class="comment">//require base tag in html head &lt;base href="/"&gt;</span></div><div class="line">            rewriteLinks: <span class="literal">true</span>  <span class="comment">//rewrite links as necessary</span></div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>If you now type a bad URL in the address bar it won’t be handled by angular but by the web server unless the web server routes everything back to the index.html file.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;(http://www.pluralsight.com/courses/angular-routing-in-depth&quot;&gt;Course page on Pluralsight&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;ngRoute is the default rout
    
    </summary>
    
      <category term="AngularJS" scheme="http://kajlund.net/categories/AngularJS/"/>
    
    
      <category term="angular" scheme="http://kajlund.net/tags/angular/"/>
    
      <category term="routing" scheme="http://kajlund.net/tags/routing/"/>
    
  </entry>
  
  <entry>
    <title>The Karma Testrunner</title>
    <link href="http://kajlund.net/2015/09/22/karma/"/>
    <id>http://kajlund.net/2015/09/22/karma/</id>
    <published>2015-09-22T15:25:30.000Z</published>
    <updated>2017-06-11T13:00:55.740Z</updated>
    
    <content type="html"><![CDATA[<p>Karma is a test runner (built on nodejs by the AngularJS team) that can run tests from a variety of testing frameworks like qUnit, Jasmine and Mocha. It has built-in support for common CI-tools.</p>
<p>It spawns a browser instance (or multiple different browser instances) and runs the tests against the different browser instances to see if the tests pass under different browser environments.</p>
<p>Karma is capable of communicating with several different browsers natively and removes the need for us to manually test our code in different browsers. Karma supports both Unit Testing and E2E Testing.</p>
<p>Run via a command or watch for changes and run automatically. Single runs are good for CI and watch can be useful when developing.</p>
<h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><ul>
<li><a href="http://karma-runner.github.io/" target="_blank" rel="external">Webpage</a> and <a href="https://github.com/karma-runner/karma" target="_blank" rel="external">github page</a></li>
<li><a href="http://toon.io/how-to-setup-karma-javascript-test-runner/" target="_blank" rel="external">Article on Setup</a></li>
</ul>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g karma</div><div class="line">npm install --save-dev karma</div></pre></td></tr></table></figure>
<p>Karma has a generator to help us build the configuration file. To run it type <code>karma init</code> and follow the instructions.</p>
<p>The <code>karma init</code> command asks some questions and generates the file <code>karma.conf.js</code>. You can modify it later if you make some bad choices initially.</p>
<h4 id="Add-System-Variables-on-Windows"><a href="#Add-System-Variables-on-Windows" class="headerlink" title="Add System Variables on Windows"></a>Add System Variables on Windows</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CHROME_BIN</div><div class="line">C:\Program Files (x86)\Google\Chrome\Application\chrome.exe</div><div class="line"></div><div class="line">FIREFOX_BIN</div><div class="line">C:\Program Files (x86)\Mozilla Firefox\firefox.exe</div></pre></td></tr></table></figure>
<h3 id="Starting-Karma"><a href="#Starting-Karma" class="headerlink" title="Starting Karma"></a>Starting Karma</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">karma start</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Karma is a test runner (built on nodejs by the AngularJS team) that can run tests from a variety of testing frameworks like qUnit, Jasmin
    
    </summary>
    
      <category term="Testing" scheme="http://kajlund.net/categories/Testing/"/>
    
    
      <category term="tools" scheme="http://kajlund.net/tags/tools/"/>
    
      <category term="tdd" scheme="http://kajlund.net/tags/tdd/"/>
    
      <category term="bdd" scheme="http://kajlund.net/tags/bdd/"/>
    
      <category term="karma" scheme="http://kajlund.net/tags/karma/"/>
    
  </entry>
  
  <entry>
    <title>Node.js intro</title>
    <link href="http://kajlund.net/2015/09/19/nodejs-intro/"/>
    <id>http://kajlund.net/2015/09/19/nodejs-intro/</id>
    <published>2015-09-19T15:25:30.000Z</published>
    <updated>2017-06-11T12:54:47.955Z</updated>
    
    <content type="html"><![CDATA[<p>An intro to nodejs picked up from Sovelto course plus <a href="http://beta.pluralsight.com/courses/node-intro" target="_blank" rel="external">Introduction to Node.js</a> and <a href="http://beta.pluralsight.com/courses/nodejs-dotnet-developers" target="_blank" rel="external">Node.js for .NET Developers</a></p>
<p>Node.js is a server-side JavaScript platform introduced by Ryan Dahl at JSConf in 2009.</p>
<p>The Node.js platform consists of:</p>
<ul>
<li>libuv - High performance, cross-platform evented I/O library</li>
<li>V8 - Google’s JavaScript engine</li>
<li>libraries built in C++ and JS</li>
</ul>
<p>Node.js binaries and installers are available at <a href="http://nodejs.org/download" target="_blank" rel="external">http://nodejs.org/download</a></p>
<p>There is also a multiple versions manager called <strong>nvm</strong> available at <a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a>.</p>
<p>You can develop node apps using pretty much any text editor or use an online IDE like <a href="https://c9.io/" target="_blank" rel="external">Cloud9</a>.</p>
<h5 id="A-Hello-World-Web-Server"><a href="#A-Hello-World-Web-Server" class="headerlink" title="A Hello World Web Server"></a>A Hello World Web Server</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">  res.end(<span class="string">'hello world\n'</span>);</div><div class="line">&#125;).listen(<span class="number">8000</span>, <span class="string">"127.0.0.1"</span>);</div></pre></td></tr></table></figure>
<p>To run it enter: <code>node server.js</code> and open the <a href="http://127.0.0.1:8000/" target="_blank" rel="external">web browser</a> to view it.</p>
<h2 id="The-Event-Loop"><a href="#The-Event-Loop" class="headerlink" title="The Event Loop"></a>The Event Loop</h2><p>Node’s uses a non-blocking, event loop that constantly listens for events like internal events, timers or external events like tcp or http events.</p>
<h2 id="Node’s-Programming-Model"><a href="#Node’s-Programming-Model" class="headerlink" title="Node’s Programming Model"></a>Node’s Programming Model</h2><p>Node depends on using asynchronous code which is a bit different to the synchronous model that most programmers are more familiar with.</p>
<p>Since most calls in node are asynchronous execution often uses the <em>callback</em> pattern but you can also use the <em>publish-subscribe</em> pattern.</p>
<h3 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h3><ul>
<li>Callbacks use the <a href="http://en.wikipedia.org/wiki/Request-response" target="_blank" rel="external">request-response</a> communication pattern and returns an error or the result</li>
<li>Does not return anything until all done.</li>
<li>This method is often used because it is simpler compared to the options.</li>
<li>By convention the callback is the last fuction param</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handleResults = <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    <span class="comment">//Check for error</span></div><div class="line">    <span class="comment">//Handle result returned in results var</span></div><div class="line">&#125;</div><div class="line">doStuff(param, handleResults);</div><div class="line"></div><div class="line">doStuff(param, <span class="function"><span class="keyword">function</span> (<span class="params">err, items</span>) </span>&#123;</div><div class="line">    <span class="comment">//Check for error</span></div><div class="line">    <span class="comment">//Handle result returned in items var</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The callback function can be a named function or an anonymous function</li>
<li>In node.js the function parameters generally look like:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">arguments, callback</span>);</span></div></pre></td></tr></table></figure>
<ul>
<li>The callback gererally consists of: <code>callback(err, returnvalues);</code></li>
<li>The callback function can be defined separately or inline as an anonymous function.</li>
</ul>
<p>Using lots of callback tend to create the so called christmas tree problem resulting in code that is hard to debug and maintain.</p>
<h3 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish/Subscribe"></a>Publish/Subscribe</h3><ul>
<li>Using the <a href="http://en.wikipedia.org/wiki/Publish/subscribe" target="_blank" rel="external">Publish/Subscribe</a> pattern you get the result in chunks and can start processing the result faster.</li>
<li>You might end up with getting some OK data before an error occurs.</li>
<li>The publish/subscribe model uses events for communicating results.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = doStuff(param);</div><div class="line">results.on(<span class="string">'item'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="comment">//Handle chunk of data sent</span></div><div class="line">&#125;);</div><div class="line">results.on(<span class="string">'done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//Done, no more data</span></div><div class="line">&#125;);</div><div class="line">results.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">//Handle error</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="The-Module-System"><a href="#The-Module-System" class="headerlink" title="The Module System"></a>The Module System</h2><p>You use modules to bring in external functionality to your application. You use the <code>require</code> function to load a module and assign it to a variable for use. Modules can explicitly export functionality (variables, functions, objects) for use in other modules. You can also import a single function from a library.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'foo'</span>);</div><div class="line"><span class="keyword">var</span> Bar = <span class="built_in">require</span>(<span class="string">'bar'</span>); <span class="comment">//Initial capital meant to be instantiated</span></div><div class="line"><span class="keyword">var</span> one = <span class="built_in">require</span>(<span class="string">'library'</span>).one;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="number">2</span> + foo.someValue;</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Bar();</div><div class="line"><span class="built_in">console</span>.log(one());</div></pre></td></tr></table></figure>
<h3 id="Types-of-Modules"><a href="#Types-of-Modules" class="headerlink" title="Types of Modules"></a>Types of Modules</h3><ul>
<li><a href="http://nodejs.org/api" target="_blank" rel="external">Built-in Modules</a> (no need to require)</li>
<li>pre-packaged modules (must use require like fs, http…)</li>
</ul>
<h2 id="Event-Emitters"><a href="#Event-Emitters" class="headerlink" title="Event Emitters"></a>Event Emitters</h2><p>In the Publish/Subscribe scenario you have the subscriber (sample above) that subscribes and reacts to emitted events by the publisher.</p>
<p>The publisher is the part that emits events to the subscriber. The events are represented by strings. You can also send an arbitrary number of parameters with the event as needed.</p>
<p>A typical event emitter is an object that extends the <a href="http://nodejs.org/api/events.html#events_class_events_eventemitter" target="_blank" rel="external">EventEmitter</a> class and publishes needed events.</p>
<h2 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h2><p>A <a href="http://nodejs.org/api/stream.html" target="_blank" rel="external">stream</a> is an EventEmitter with an abstract interface. It is used throughout node for handling data flow scenarios like:</p>
<ul>
<li>Networking (http request/response, tcp socket)</li>
<li>File I/O</li>
<li>stdin/stdout/stderr</li>
</ul>
<p>A stream can be read-only (stream.Readable), write-only (stream.Writable) or both</p>
<h2 id="The-Process-Object"><a href="#The-Process-Object" class="headerlink" title="The Process Object"></a>The Process Object</h2><ul>
<li><a href="http://nodejs.org/api/process.html" target="_blank" rel="external">API Documentation</a></li>
</ul>
<h5 id="Streams-1"><a href="#Streams-1" class="headerlink" title="Streams"></a>Streams</h5><ul>
<li>process.stdin</li>
<li>process.stdout</li>
<li>process.stderr</li>
</ul>
<h5 id="Event-Emitters-1"><a href="#Event-Emitters-1" class="headerlink" title="Event Emitters"></a>Event Emitters</h5><ul>
<li>event ‘exit’</li>
<li>event ‘uncaughtException’</li>
<li>POSIX signal events (‘SIGINT’, etc )</li>
</ul>
<h5 id="Process-Info-like"><a href="#Process-Info-like" class="headerlink" title="Process Info like"></a>Process Info like</h5><ul>
<li>process.env</li>
<li>process.pid</li>
<li>process.title</li>
<li>process.uptime()</li>
<li>process.memoryUsage</li>
</ul>
<h5 id="Process-Commands-Like"><a href="#Process-Commands-Like" class="headerlink" title="Process Commands Like"></a>Process Commands Like</h5><ul>
<li>process.kill()</li>
</ul>
<h2 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h2><ul>
<li>The <a href="http://nodejs.org/api/fs.html" target="_blank" rel="external">File System</a> support is based on POSIX functionality, both async and sync versions of functions available</li>
<li>Streams<ul>
<li>fs.createReadStream()</li>
<li>fs.createWriteStream()</li>
</ul>
</li>
<li>File events - fs.FSWatcher<ul>
<li>watcher.close()</li>
<li>Event: ‘change’</li>
<li>Event: ‘error’</li>
</ul>
</li>
</ul>
<h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><ul>
<li>Traditionally JavaScript has not been good at handling binary data but it is needed by fileSystem and communication classes in node.</li>
<li>Buffer enables handling of binary data for these</li>
<li>A buffer can be converted to/from strings using different encodings like ascii, utf8 (default), utf16le, ucs2, base64, binary and hex.</li>
<li>Buffer thus also supports encoding and decoding strings to/from base64.</li>
</ul>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Http-Request"><a href="#Http-Request" class="headerlink" title="Http Request"></a>Http Request</h3><p>The http protocol is supported by the <a href="http://nodejs.org/api/http.html" target="_blank" rel="external">http module</a>.</p>
<pre><code>var http = require(&apos;http&apos;),
    req = http.request(&apos;http://www.google.fi&apos;, function(resp) {
        console.log(resp.statusCode);
        console.log(&quot;headers: &quot;, resp.headers);
        resp.pipe(process.stdout);
    });
req.end();
</code></pre><ul>
<li>The req variable will contain a http.ClientRequest object</li>
<li>The resp variable will contain a http.ClientResponse object (ReadableStream)</li>
<li>The request method can be called with a url string or with an options object as parameter</li>
<li>Redirects will not be followed (use follow-redirects package)</li>
<li>Get requests can be simplified by using the get verb</li>
</ul>
<h3 id="A-Simple-Web-Server"><a href="#A-Simple-Web-Server" class="headerlink" title="A Simple Web Server"></a>A Simple Web Server</h3><pre><code>var http = require(&apos;http&apos;),
host = process.env.IP || &apos;127.0.0.1&apos;,
port = process.env.PORT || 8080;

http.createServer(function (req, res) {
    res.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos; });
    res.end(&apos;Hello World\n&apos;);
}).listen(port, host);
console.log(&apos;Server running at &apos; + host + &apos;:&apos; + port);
</code></pre><ul>
<li>The req variable contains http.ServerRequest (ReadableStream)</li>
<li>The res variable contains http.ServerResponse (WritableStream)</li>
<li>The request can be handled in a callback as above or or using events</li>
<li>You can also use https instead of using http</li>
</ul>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><ul>
<li>Two-way real time communication protocol</li>
<li>Part of html5 W3C &amp; IETF standard</li>
<li>Low latency</li>
<li>Low bandwidth</li>
</ul>
<p>Supported on Windows for IE10+ .NET4.5, Win 8 Metro, Windows Server 2012. For .NET developers there is the SignalR framework.</p>
<p>Browser support <a href="http://caniuse.com/websockets" target="_blank" rel="external">here</a></p>
<ul>
<li>Node supports it via <strong>socket.io</strong></li>
</ul>
<h4 id="WebSocket-Sample"><a href="#WebSocket-Sample" class="headerlink" title="WebSocket Sample"></a>WebSocket Sample</h4><h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(<span class="number">80</span>);</div><div class="line"></div><div class="line">io.sockets.on(<span class="string">'connection'</span>),</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">        socket.emit(<span class="string">'data'</span>, &#123;<span class="attr">hello</span>: <span class="string">'World'</span>&#125;);</div><div class="line"></div><div class="line">        socket.on(<span class="string">'clientData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(data);</div><div class="line">    &#125;);</div><div class="line"> );</div></pre></td></tr></table></figure>
<h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;socket.io.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var s = io.connect(&apos;http://.&apos;);</div><div class="line">    s.on(&apos;data&apos;, function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">        s.emit(&apos;clientData&apos;, &#123;my: &apos;Data&apos;&#125;);</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h3><ul>
<li>Most commonly used node web framework is <a href="http://expressjs.com/" target="_blank" rel="external">express</a></li>
<li>For ORM there is <a href="http://sequelizejs.com" target="_blank" rel="external">Sequelize</a></li>
<li>Using node with <a href="http://www.windowsazure.com/en-us/develop/nodejs/tutorials/web-site-with-sql-database/" target="_blank" rel="external">Windows Azure Database</a></li>
</ul>
<h2 id="Testing-Node-js"><a href="#Testing-Node-js" class="headerlink" title="Testing Node.js"></a>Testing Node.js</h2><ul>
<li>Basic unit testing is built in using the assert module</li>
<li>For BDD style testing you can use <a href="https://github.com/visionmedia/should.js/" target="_blank" rel="external">should.js</a> and <a href="http://visionmedia.github.io/mocha/" target="_blank" rel="external">Mocha</a></li>
</ul>
<h3 id="The-assert-Module"><a href="#The-assert-Module" class="headerlink" title="The assert Module"></a>The assert Module</h3><ul>
<li>A built-in module for unit testing</li>
<li>Test for (in)equality between expected and actual values</li>
<li>Test whether a block of code throws (or doesn’t throw) an exception <code>throw new Error()</code></li>
<li>Test for the “truthiness” of a value</li>
<li>Test whether the “error” parameter was passed to a callback</li>
<li>Each assertion can contain an output message on failure</li>
</ul>
<h5 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h5><ul>
<li><code>assert.equal()</code> : shallow i.e. coercive equality(==)</li>
<li><code>assert.strictEqual()</code> : strict equality (===)</li>
<li><code>assert.deepEqual()</code> :<ul>
<li>coercive equality</li>
<li>Non-Objects are coercively tested</li>
<li>Date objects must have same date/time</li>
<li>Other objects (incl. Array). Same amount of properties, checking keys &amp; values plus that prototypes match.</li>
</ul>
</li>
</ul>
<h3 id="BDD-style-testing"><a href="#BDD-style-testing" class="headerlink" title="BDD style testing"></a>BDD style testing</h3><p>For BDD style testing you can use the should.js library and the <a href="http://visionmedia.github.io/mocha/" target="_blank" rel="external">Mocha</a> testrunner.</p>
<ul>
<li>Can run tests in specified order, both synch and asynch</li>
<li>You can group tests into suites</li>
<li>Tests are run using Mocha from the command line. You can run only a specified suite</li>
</ul>
<h3 id="should-js"><a href="#should-js" class="headerlink" title="should.js"></a>should.js</h3><p>should.js extends the assert module with <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="external">BDD</a> style testing</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">'should'</span>),</div><div class="line">    user = &#123;<span class="attr">name</span>: <span class="string">'tj'</span>, <span class="attr">pets</span>: [<span class="string">'tobi'</span>, <span class="string">'loki'</span>, <span class="string">'jane'</span>, <span class="string">'bandit'</span>]&#125;;</div><div class="line"></div><div class="line">user.should.have.property(<span class="string">'name'</span>, <span class="string">'tj'</span>);</div><div class="line">user.should.have.property(<span class="string">'pets'</span>).with.lengthOf(<span class="number">4</span>);</div><div class="line"><span class="comment">// or without Object.prototype, for guys how did Object.create(null)</span></div><div class="line">should(user).have.property(<span class="string">'name'</span>, <span class="string">'tj'</span>);</div><div class="line">should(<span class="literal">true</span>).ok;</div><div class="line">someAsyncTask(foo, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    should.not.exist(err);</div><div class="line">    should.exist(result);</div><div class="line">    result.bar.should.equal(foo);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Deployment-Environments"><a href="#Deployment-Environments" class="headerlink" title="Deployment Environments"></a>Deployment Environments</h2><p>Node.js runs in a single thread so multiple processor cores typically does not help. The solution is to use multiple node processes.</p>
<ul>
<li>The <code>spawn</code> command starts a new process</li>
<li>The <code>exec</code> command runs in a command shell and takes callback</li>
<li>execFile is like exec but for running a specific file</li>
<li>In IIS use <a href="https://github.com/tjanczuk/iisnode" target="_blank" rel="external">iisnode</a></li>
</ul>
<h3 id="iisnode"><a href="#iisnode" class="headerlink" title="iisnode"></a>iisnode</h3><p>iisnode is a native IIS module that allows hosting of node.js applications in IIS on Windows.</p>
<ul>
<li><strong>Process management</strong>. The iisnode module takes care of lifetime management<br>of node.exe processes making it simple to improve overall reliability. You don’t<br>have to implement infrastructure to start, stop, and monitor the processes.</li>
<li><p><strong>Side by side with other content types</strong>. The iisnode module integrates with IIS in<br>a way that allows a single web site to contain a variety of content types. For<br>example, a single site can contain a node.js application, static HTML and<br>JavaScript files, PHP applications, and ASP.NET applications. This enables<br>choosing the best tools for the job at hand as well progressive migration of<br>existing applications.</p>
</li>
<li><p><strong>Scalability on multi-core servers</strong>. Since node.exe is a single threaded process, it<br>only scales to one CPU core. The iisnode module allows creation of multiple<br>node.exe processes per application and load balances the HTTP traffic between<br>them, therefore enabling full utilization of a server’s CPU capacity without<br>requiring additional infrastructure code from an application developer.</p>
</li>
<li><p><strong>Integrated debugging</strong>. With iisnode integrated debugging you can debug<br>your node.js application deployed to IIS from a browser running on<br>Windows, Mac, or Linux. You get this support out of the box, no extra<br>configuration or installation is necessary. The solution is designed in a<br>way that is shared hosting, firewall, and proxy friendly. The integrated<br>debugging in iisnode uses node-inspector by Danny Coates.</p>
</li>
<li><p><strong>Auto-update</strong>. The iisnode module ensures that whenever the node.js<br>application is updated (i.e. the script file has changed), the node.exe<br>processes are recycled. Ongoing requests are allowed to gracefully finish<br>execution using the old version of the application, while all new requests<br>are dispatched to the new version of the app.</p>
</li>
<li><p><strong>Access to logs over HTTP</strong>. The iisnode module provides access the<br>output of the node.exe process (e.g. generated by console.log calls) via<br>HTTP. This facility is key in helping you debug node.js applications<br>deployed to remote servers.</p>
</li>
<li><p><strong>Minimal changes to node.js application code</strong>. The iisnode module<br>enables hosting of existing HTTP node.js applications with very minimal<br>changes. Typically all that is required is to change the listed address of<br>the HTTP server to one provided by the iisnode module via the<br>process.env.PORT environment variable.</p>
</li>
<li><p><strong>Integrated management experience</strong>. The issnode module is fully<br>integrated with IIS configuration system and uses the same tools and<br>mechanism as other IIS components for configuration and maintenance.</p>
</li>
<li><p><strong>Other IIS benefits</strong>. Port sharing, security, URL rewriting, compression,<br>caching, logging</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An intro to nodejs picked up from Sovelto course plus &lt;a href=&quot;http://beta.pluralsight.com/courses/node-intro&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
      <category term="NodeJS" scheme="http://kajlund.net/categories/NodeJS/"/>
    
    
      <category term="javascript" scheme="http://kajlund.net/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://kajlund.net/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>REST API Design</title>
    <link href="http://kajlund.net/2015/09/07/api-design/"/>
    <id>http://kajlund.net/2015/09/07/api-design/</id>
    <published>2015-09-07T15:25:30.000Z</published>
    <updated>2017-06-11T13:05:32.765Z</updated>
    
    <content type="html"><![CDATA[<p>The basics of API design picked up by watching the PluralSight API Design Course<br>by Shawn Wildermuth.</p>
<p><strong>See also</strong>: HTTP Response Codes are defined in <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">W3C RFC2616</a>. <a href="http://jsonapi.org/" target="_blank" rel="external">jsonapi.org</a> has info on standard ways of representing data.</p>
<p>The way APIs are designed is important because:</p>
<ul>
<li>APIs are the UI layer to developers</li>
<li>Easy to use APIs are more readily adopted</li>
<li>Picking the right level of API is crucial to success</li>
<li>Don’t surprise your users</li>
<li>Balance what is good for the user with what is good for the server</li>
<li>Ultimately, users are what make a successful API</li>
</ul>
<blockquote>
<p>There is no real right or wrong way. Just avoid dogma and be pragmatic.</p>
</blockquote>
<h2 id="URIs"><a href="#URIs" class="headerlink" title="URIs"></a>URIs</h2><ul>
<li>Nouns are good, verbs are bad.</li>
<li>URIs should point at nouns (e.g. resources)</li>
<li>Prefer plural form</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://api/Customers</div><div class="line">http://api/Invoices</div></pre></td></tr></table></figure>
<p>Use identifiers to locate individual items in URIs. Doesn’t have to be internal key as long as it is unique.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://api/Customers/123</div><div class="line">http://api/Games/halo-3</div><div class="line">http://api/Invoices/2014-01-01</div></pre></td></tr></table></figure>
<h2 id="HTTP-Verbs"><a href="#HTTP-Verbs" class="headerlink" title="HTTP Verbs"></a>HTTP Verbs</h2><table>
<thead>
<tr>
<th>Resource</th>
<th>GET</th>
<th>POST</th>
<th>PUT</th>
<th>DELETE</th>
</tr>
</thead>
<tbody>
<tr>
<td>/customers</td>
<td>Get list</td>
<td>Create item</td>
<td>Update batch</td>
<td>Error</td>
</tr>
<tr>
<td>/customers/123</td>
<td>Get item</td>
<td>Error</td>
<td>Update item</td>
<td>Delete item</td>
</tr>
</tbody>
</table>
<p><strong>What to Return</strong></p>
<table>
<thead>
<tr>
<th>Resource</th>
<th>GET</th>
<th>POST</th>
<th>PUT</th>
<th>DELETE</th>
</tr>
</thead>
<tbody>
<tr>
<td>/customers</td>
<td>List</td>
<td>New item</td>
<td>Status code</td>
<td>Error code</td>
</tr>
<tr>
<td>/customers/123</td>
<td>Item</td>
<td>Error code</td>
<td>Updated item</td>
<td>Status code</td>
</tr>
</tbody>
</table>
<h2 id="Status-Codes"><a href="#Status-Codes" class="headerlink" title="Status Codes"></a>Status Codes</h2><p>The HTTP specification defines the status codes. Below are some common ones:</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>OK</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
</tr>
<tr>
<td>202</td>
<td>Accepted</td>
</tr>
<tr>
<td>302</td>
<td>Found</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified</td>
</tr>
<tr>
<td>307</td>
<td>Temp Redirect</td>
</tr>
<tr>
<td>308</td>
<td>Perm Redirect</td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
</tr>
<tr>
<td>401</td>
<td>Not Authorized</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
</tr>
<tr>
<td>409</td>
<td>Conflict</td>
</tr>
<tr>
<td>500</td>
<td>Internal Error</td>
</tr>
</tbody>
</table>
<p>Limit the number of returned status codes to keep the API simple. <strong>Consider these as a bare minimum</strong>:</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
<th>Real Story</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>OK</td>
<td>It Worked</td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>Your Bad</td>
</tr>
<tr>
<td>500</td>
<td>Internal Error</td>
<td>Our Bad</td>
</tr>
</tbody>
</table>
<p><strong>The following could be useful for clients</strong>:</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>201</td>
<td>Created</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
</tr>
</tbody>
</table>
<p><strong>Sample of Sensible Defaults:</strong></p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>200 OK</td>
<td>Successful request</td>
</tr>
<tr>
<td>204</td>
<td>No Content    File contains no data</td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently    The requested resource has permanently moved to another address</td>
</tr>
<tr>
<td>401</td>
<td>Not Authorized    Athorization needed to access resource</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
</tr>
<tr>
<td>404</td>
<td>Not Found    The requested resource cannot be found</td>
</tr>
<tr>
<td>408</td>
<td>Request Timeout. The Request timed out</td>
</tr>
<tr>
<td>500</td>
<td>Server Error</td>
</tr>
</tbody>
</table>
<h2 id="Associations"><a href="#Associations" class="headerlink" title="Associations"></a>Associations</h2><p>Using URIs</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//api/Customers/123/Invoices</span></div><div class="line">http:<span class="comment">//api/Games/halo-3/Ratings</span></div><div class="line">http:<span class="comment">//api/Invoices/2014-01-01/Payments</span></div></pre></td></tr></table></figure>
<p>Returns single object or list of objects. The format should be the same as when loading associated objects as when loading them as main resources. A resource may include multiple associations:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//api/Customers/123/Invoices</span></div><div class="line">http:<span class="comment">//api/Customers/123/Payments</span></div><div class="line">http:<span class="comment">//api/Customers/123/Shipments</span></div></pre></td></tr></table></figure>
<p><strong>For more complex needs use query params</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//api/Customers/123/Invoices?date=2014-0101&amp;type=credit</span></div></pre></td></tr></table></figure>
<h2 id="Formatting-the-Results"><a href="#Formatting-the-Results" class="headerlink" title="Formatting the Results"></a>Formatting the Results</h2><ul>
<li>Single Results should be simple objects</li>
<li>Member names should not expose server details and be camelCased or at least be consistent.</li>
<li>Collections typically use an object wrapping a simple collection to hold information about the collection and not just the items.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">120</span>,</div><div class="line">    <span class="string">"results"</span>: [</div><div class="line">        &#123;<span class="string">"id"</span>: <span class="number">1</span>,...&#125;, ...</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Response-Formats"><a href="#Response-Formats" class="headerlink" title="Response Formats"></a>Response Formats</h3><ul>
<li>Content negotiation is a best practice. Use Accept header to determine format. <code>Accept: application/json, text/xml</code></li>
<li>Can use URIs to specify format but not recommended. Use only if you need to use clients that cannot use headers.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//api/Customers?format=json</span></div><div class="line">http:<span class="comment">//api/Customers.json</span></div><div class="line">http:<span class="comment">//api/Customers?format=json&amp;callback=foo</span></div></pre></td></tr></table></figure>
<ul>
<li>Not necessary to support lots of formats. Use a sane default, usually JSON.</li>
</ul>
<table>
<thead>
<tr>
<th>Type</th>
<th>MIME Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>JSON</td>
<td>application/json</td>
</tr>
<tr>
<td>XML</td>
<td>text/xml</td>
</tr>
<tr>
<td>JSONP</td>
<td>application/javascript</td>
</tr>
<tr>
<td>RSS</td>
<td>application/xml+rss</td>
</tr>
<tr>
<td>ATOM</td>
<td>application/xml+atom</td>
</tr>
</tbody>
</table>
<h3 id="Entity-Tags-ETags"><a href="#Entity-Tags-ETags" class="headerlink" title="Entity Tags (ETags)"></a>Entity Tags (ETags)</h3><ul>
<li>ETags are used to support smart server caching</li>
<li>Supports both strong and weak caching and are typically returned in the response header</li>
<li>The ETag represents a version of the results returned</li>
<li>Weak ETags means results are semantically the same whereas strong ETag suggests they are byte by byte identical. Weak ETags are prefixed with W/.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type:application/json; charset=utf-8</div><div class="line">Date: 20-01-2014 16:46:52 GMT</div><div class="line">ETag: &quot;8934675928367085&quot;</div><div class="line">Content-Length: 1024</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type:application/json; charset=utf-8</div><div class="line">Date: 20-01-2014 16:46:52 GMT</div><div class="line">ETag: W/&quot;8934675928367085&quot;</div><div class="line">Content-Length: 1024</div></pre></td></tr></table></figure>
<ul>
<li><p>Client sends along ETag with request to check for new data.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /api/customers/123 HTTP/1.1</div><div class="line">Accept: application/json</div><div class="line">Host: localhost:8863</div><div class="line">If-None-Match: &quot;8934675928367085&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>If the above request would result in the same object the server returns a 304 Not Modified with an empty body.</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 304 Not Modified</div></pre></td></tr></table></figure>
<ul>
<li>For PUTs you can use If-Match to check that the object you want to save hasn’t been modified.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PUT /api/customers/123 HTTP/1.1</div><div class="line">Accept: application/json</div><div class="line">Host: localhost:8863</div><div class="line">If-Match: &quot;8934675928367085&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>If server has matching ETag for object then PUT should be allowed otherwise the PUT should return <code>412 Precondition Failed</code> and client needs to GET a more recent version before trying to PUT again.</li>
</ul>
<h3 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h3><ul>
<li>Lists should always support paging for restricting the amount of data sent over the network to the client and for reducing the amount of work the server does for a single request.</li>
<li>Use query string parameters for paging information. For instance pageSize is typical for allowing the client to determine how many he wants/call.</li>
<li>Commonly use the list object wrapper for next/prev links</li>
<li>Return totalSize of the dataset so that the client can calculate how many pages there would be.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//api/games/?page=2&amp;pageSize=50</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">1598</span>,</div><div class="line">    <span class="string">"next"</span>: <span class="string">"http://api/Invoices/?page=3"</span>,</div><div class="line">    <span class="string">"prev"</span>: <span class="string">"http://api/Invoices/?page=1"</span>,</div><div class="line">    <span class="string">"results"</span>: [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Set an upper limit for pageSize to something reasonable for the server to process at any one time.</li>
</ul>
<h3 id="Partials"><a href="#Partials" class="headerlink" title="Partials"></a>Partials</h3><ul>
<li>APIs should allow for requesting partial items. This can significantly reduce data traffic.</li>
<li>Allowing the client to specify what fields it needs in a particular case.</li>
<li>Using the query string is a common pattern <code>http://api/invoices/123?fields=id,invoiceDate,totalAmount</code></li>
<li>Updating of partial items could be supported with the PATCH verb</li>
<li>Updating partials would be safer if you implement ETag support</li>
</ul>
<h2 id="Non-Resource-APIs"><a href="#Non-Resource-APIs" class="headerlink" title="Non-Resource APIs"></a>Non-Resource APIs</h2><ul>
<li>Handling of the functional parts of the API that cannot easily be solved by using resources and HTTP verbs.</li>
<li>Be pragmatic and document these parts properly</li>
<li>API user should be able to distingguish these types of operations from the normal usage of resources</li>
<li>Usually handled by calling get requests and functional, not resource based</li>
<li>Don’t use an an excuse to build RPC API</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:/&amp;/api/calculateTax?state=GA&amp;total=149.90</div></pre></td></tr></table></figure>
<h2 id="API-Versioning"><a href="#API-Versioning" class="headerlink" title="API Versioning"></a>API Versioning</h2><ul>
<li>A published API is a contract and should not be changed. Client rely on a fix API or they will break.</li>
<li>Versioning is a way of evolving the API without breaking existing clients</li>
<li>Don’t tie API versioning to product versions</li>
<li>No best way of versioning APIs but we can learn from existing ones</li>
</ul>
<h3 id="Versioning-Styles"><a href="#Versioning-Styles" class="headerlink" title="Versioning Styles"></a>Versioning Styles</h3><ul>
<li>Using URI path <code>http://api.tumblr.com/v2/user/</code> like Tumblr.</li>
<li>Using a Query param <code>http://api.netflix.com/catalog/titles/series/70023522?v=1.5</code> like Netflix</li>
<li>Using content negotiation: <code>Content-Type: application/vnd.github.1.param+json</code> like GitHub</li>
<li>Using a request header: <code>x-ms-version:2011-08-18</code> like Windows Azure</li>
</ul>
<h3 id="Versioning-using-the-URI-path"><a href="#Versioning-using-the-URI-path" class="headerlink" title="Versioning using the URI path"></a>Versioning using the URI path</h3><ul>
<li>Everything after the version number is open to change</li>
<li>Allows for drastic changes</li>
<li>Simple to segregate old APIs for backwards compatibility</li>
<li>Could require lots of client changes as you version</li>
<li>Increases the size of the URI surface area you have to support</li>
<li>Can expand reach but also icrease technical debt</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://api.attracs.com/v1/Customers?type=Current&amp;id=123</div><div class="line">http://api.attracs.com/v2/CurrentCustomers/123</div></pre></td></tr></table></figure>
<h3 id="Versioning-using-Query-Param"><a href="#Versioning-using-Query-Param" class="headerlink" title="Versioning using Query Param"></a>Versioning using Query Param</h3><ul>
<li>Version can be an optional parameter. Latest version by default</li>
<li>Doesn’t impose huge client changes as versions mature.</li>
<li>You can surprise developers with unexpected changes and break clients</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://api.attracs.com/Customers</div><div class="line">http://api.attracs.com/Customers?v=2.1</div></pre></td></tr></table></figure>
<h3 id="Versioning-using-Content-Negotiation"><a href="#Versioning-using-Content-Negotiation" class="headerlink" title="Versioning using Content Negotiation"></a>Versioning using Content Negotiation</h3><ul>
<li>Becoming increasingly popular because the versioning is separated from the API surface area.</li>
<li>Packages API and Resource Versioning together. Versioning can be tied to specific resources</li>
<li>Client don’t have to change URIs</li>
<li>Adds complexity. Some clients may not be able to use headers</li>
<li>Can encourage increased versioning and overall complexity</li>
</ul>
<p>Use custom MIME types in header. Standard indicates you should use “vnd.” (meaning vendor) as prefix to the MIME type</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /Customers/123</div><div class="line">HOST:http://api.attracs.com</div><div class="line">Accept: application/vnd.amc.v1.customer</div><div class="line"></div><div class="line">Accept: application/vnd.amc.v1.customer.json</div></pre></td></tr></table></figure>
<h3 id="Versioning-using-Custom-Header"><a href="#Versioning-using-Custom-Header" class="headerlink" title="Versioning using Custom Header"></a>Versioning using Custom Header</h3><ul>
<li>Use a header value that is only recognised by the API</li>
<li>Common to use date instead of a version number</li>
<li>Separates versioning from API call signatures</li>
<li>Not tied to resource versioning</li>
<li>Adds complexity. Some clients may not be able to use headers</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /Customers/123</div><div class="line">HOST:http://api.attracs.com</div><div class="line">x-AMC-Version: 2.1</div><div class="line"></div><div class="line">x-AMC-Version: 2014-01-01</div></pre></td></tr></table></figure>
<p>It’s hard to generally say which style is best. Content Negotiation and Custom Header styles are popular but adds some complexity. Versioning with URI components are still more common. These are typically easier to implement but can add more technical debt.</p>
<p>The API should support versioning from the first release.</p>
<h3 id="Resource-Versioning"><a href="#Resource-Versioning" class="headerlink" title="Resource Versioning"></a>Resource Versioning</h3><ul>
<li>Versioning API calls isn’t enough. The resources themselves should be versioned too because structures and constraints change over time.</li>
<li>Versioning resources is easier using custom content types</li>
<li>Including versioning data in the resource body is an option, but it pollutes the data</li>
</ul>
<h2 id="Securing-the-API"><a href="#Securing-the-API" class="headerlink" title="Securing the API"></a>Securing the API</h2><ul>
<li>Security should be part of the original design. don’t patch it on as an afterthought.</li>
<li>Should be secure by default. Don’t return sensitive information before authorized</li>
</ul>
<p><strong>You need to secure the API if:</strong></p>
<ul>
<li>You’re using personalized or private data</li>
<li>Sending sensitive data across the wire</li>
<li>Using credentials of any kind</li>
<li>Protecting against overuse of servers</li>
</ul>
<p><strong>Threats:</strong></p>
<ul>
<li>Eavesdroppers (packet sniffers etc)</li>
<li>Hackers or even personnel (Intrusion and physical security)</li>
<li>Users/Hackers looking at source for accessing the API</li>
</ul>
<p>Securing the server infrastructure is another topic</p>
<p>Secure In-Transit (protecting data when it goes across the wire). Using SSL is typically worth the expense</p>
<p>Securing the API consists of Cross-Origin Security and Authorization/Authentication.</p>
<h3 id="Cross-Domain-Security"><a href="#Cross-Domain-Security" class="headerlink" title="Cross Domain Security"></a>Cross Domain Security</h3><p>Should you allow calls from separate domains? If internal, probably not. If public facing you might need to support cross-domain.</p>
<p>Two Approaches:</p>
<ul>
<li>Support JSONP format</li>
<li>Enable Cross-Origin Resource Sharing (CORS)</li>
</ul>
<h5 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUser</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">//use Data</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /api/games?callback=updateGames HTTP/<span class="number">1.1</span></div><div class="line">Accept: application/javascript</div><div class="line">Host: localhost:<span class="number">8863</span></div><div class="line"></div><div class="line">-&gt; updateUser(&#123;total=<span class="number">1</span>, results=[...]&#125;);</div></pre></td></tr></table></figure>
<p>The data sent back from the server will be the same. It will just be wrapped in a function call.</p>
<h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><ul>
<li>Allows Cross Site support from browser but requires handshake</li>
<li>Implementing can be difficult but many platforms support it</li>
<li>Rules implemented on server</li>
</ul>
<h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p>Who is calling the API?</p>
<ul>
<li>Server-to-Server Authentication using API keys and shared secrets</li>
<li>User Proxy Authenticaton using OAuth and similar</li>
<li>Direct User Authentication using cookies or tokens. Common for private APIs</li>
<li>Credential: A fact that can describe an identity like username and password</li>
</ul>
<blockquote>
<p>Authentication: Validate a set of credentials to identify an entity (whether virtual or actual).</p>
<p>Authorization: Verification that an entity has right to access a resource or action.</p>
</blockquote>
<h4 id="API-Keys"><a href="#API-Keys" class="headerlink" title="API Keys"></a>API Keys</h4><ul>
<li>For non-user specific API usage like AWS, Google maps for monitoring usage</li>
<li>Sign up for API key</li>
<li>System returns API key and shared secret (usually for encryption)</li>
<li>Developer creates a request providing the API key.</li>
<li>A Signature is created for the requestusing the shared secret</li>
<li>Request + Signature is sent to service</li>
<li>Server looks up shared secret for user via API key and signs the request with it</li>
<li>Server verifies same signatures and within timeout</li>
<li>If all valid server executes request and returns data</li>
</ul>
<h4 id="User-Security-Authenticating-Users"><a href="#User-Security-Authenticating-Users" class="headerlink" title="User Security/Authenticating Users"></a>User Security/Authenticating Users</h4><p>If your system has users, how do you verify which user is calling the API?</p>
<ul>
<li>For 1st party solutions you could use what the web server provides like using Windows Authentication or ASP.NET forms authentications.</li>
<li>For 3rd party API developers don’t ask them to collect credentials, use OAuth</li>
</ul>
<h4 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h4><p>For allowing developer to act as a user in your system but allows you to keep control of accepting credentials</p>
<p>Then trust a 3rd party with a token that represents the API developer. The developer will never receive the user credentials.</p>
<h2 id="Hypermedia"><a href="#Hypermedia" class="headerlink" title="Hypermedia"></a>Hypermedia</h2><p>Hypermedia is links for APIs helping developers to know how to use the API Links helps APIs become self-describing Links become the application state</p>
<ul>
<li>Hypermedia As The Engine of Application State (HATEOAS)</li>
<li>HATEOAS add links on top of REST-ful HTTP</li>
</ul>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>What kinds of links to provide:</p>
<ul>
<li>Paging</li>
<li>Creating New Items</li>
<li>Retrieving Associations</li>
<li>Actions</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">totalResults</span>: <span class="number">1000</span>,</div><div class="line">    <span class="attr">links</span>: [</div><div class="line">        &#123;<span class="string">"href"</span>: <span class="string">"/api/v1/games?page=1"</span>, <span class="string">"rel"</span>: <span class="string">"prevPage"</span> &#125;,</div><div class="line">        &#123;<span class="string">"href"</span>: <span class="string">"/api/v1/games?page=3"</span>, <span class="string">"rel"</span>: <span class="string">"nextPage"</span> &#125;,</div><div class="line">        &#123;<span class="string">"href"</span>: <span class="string">"/api/v1/games"</span>, <span class="string">"rel"</span>: <span class="string">"insert"</span> &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"results"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">links</span>: [</div><div class="line">        &#123;<span class="string">"href"</span>: <span class="string">"/api/v1/games/2"</span>, <span class="string">"rel"</span>: <span class="string">"self"</span> &#125;,</div><div class="line">        &#123;<span class="string">"href"</span>: <span class="string">"/api/v1/games/2/rating"</span>, <span class="string">"rel"</span>: <span class="string">"rating"</span> &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Final Fantasy XIII"</span>,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Profile Media Types</p>
<ul>
<li>Profiles are descriptions of data returned</li>
<li>Alternative to using custom MIME types in versioning</li>
<li>Should be included in the Accept header</li>
<li>Server can return profile for client</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /api/order/<span class="number">123</span></div><div class="line">HOST: http:<span class="comment">//..</span></div><div class="line">Accept: appliaction/json;profile=http:<span class="comment">//api.attracs.com/orders</span></div></pre></td></tr></table></figure>
<h3 id="Hypermedia-Standards"><a href="#Hypermedia-Standards" class="headerlink" title="Hypermedia Standards"></a>Hypermedia Standards</h3><p>The standards are emerging None are final</p>
<ul>
<li>HAL</li>
<li>Collection+JSON</li>
</ul>
<p>Based on content types with profile media type Content type defines data formatting Profile media type defines the structure of the data Keeps the format and structure/version separated</p>
<h4 id="HAL"><a href="#HAL" class="headerlink" title="HAL"></a>HAL</h4><ul>
<li>Hypertext Application Language strives to be a lean hypermedia type</li>
<li>Supports standard formats like JSON and XML for including resources and links</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">content type application/hal+json</div><div class="line">content type application/hal+xml</div><div class="line">content type application/hal+json;profile=http://api.attracs.com/orders</div></pre></td></tr></table></figure>
<p>Resources contains state and links plus embedded resources containing state and links</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"_links"</span>:&#123;</div><div class="line">    <span class="string">"self"</span>: &#123;<span class="string">"href"</span>: <span class="string">"/games"</span>&#125;,</div><div class="line">    <span class="string">"next"</span>: &#123;<span class="string">"href"</span>: <span class="string">"/games?page=2"</span>&#125;,</div><div class="line">    <span class="string">"find"</span>: &#123;<span class="string">"href"</span>: <span class="string">"/games&#123;?query&#125;"</span>, <span class="string">"templated"</span>: <span class="literal">true</span>&#125;,</div><div class="line">    <span class="string">"totalCount"</span>: <span class="number">100</span>,</div><div class="line">    <span class="string">"_embedded"</span>: &#123;</div><div class="line">        <span class="string">"results"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="string">"_links"</span>: &#123;</div><div class="line">                    <span class="string">"self"</span>: &#123;<span class="string">"href"</span>: <span class="string">"/games/123"</span>&#125;,</div><div class="line">                    ...</div><div class="line">                &#125;,</div><div class="line">                <span class="string">"price"</span>: <span class="number">30.00</span>,</div><div class="line">                <span class="string">"currency"</span>: <span class="string">"USD"</span>,</div><div class="line">                <span class="string">"name"</span>: <span class="string">"Halo 3"</span></div><div class="line">            &#125;,</div><div class="line">            ...</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Template Links: Used when URI includes a template (e.g. RFC6570)</p>
<h4 id="Collection-JSON"><a href="#Collection-JSON" class="headerlink" title="Collection + JSON"></a>Collection + JSON</h4><ul>
<li>A standard for reading and writing collections</li>
<li>Communicating lists and individual items</li>
<li>Includes UI elements in messages</li>
<li>Good for simple machine driven lists but a bit verbose for data-driven REST</li>
<li>Including UI elements sets scene for automating code</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">content type application/vnd.collection+json</div><div class="line">content type application/vnd.collection+json;profile=http://foo.com/bar</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"collection"</span>: &#123;</div><div class="line">        <span class="string">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">        <span class="string">"href"</span>: <span class="string">"http://api.attracs.com/Orders"</span>,</div><div class="line">        <span class="string">"links"</span>: [</div><div class="line">            &#123; <span class="string">"rel"</span>: <span class="string">"feed"</span>, <span class="string">"href"</span>: <span class="string">"http://api.attracs.com/Orders/rss"</span> &#125;</div><div class="line">        ],</div><div class="line">        <span class="string">"items"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="string">"href"</span>: <span class="string">"http://api.attracs.com/Orders/1"</span>,</div><div class="line">                <span class="string">"data"</span>: [</div><div class="line">                    &#123; <span class="string">"Id"</span>: <span class="number">1</span>, <span class="string">"Date"</span>: <span class="string">"2014-01-01"</span>&#125;,</div><div class="line">                    ...</div><div class="line">                ],</div><div class="line">                <span class="string">"links"</span>: [</div><div class="line">                    &#123;</div><div class="line">                        <span class="string">"rel"</span>: <span class="string">"customer"</span>,</div><div class="line">                        <span class="string">"href"</span>: <span class="string">"http://api.attracs.com/Orders/1/customer"</span>,</div><div class="line">                        <span class="string">"prompt"</span>: <span class="string">"Show Customer"</span></div><div class="line">                    &#125;,</div><div class="line">                    ...</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It also includes queries and templates for UI building:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"collection"</span>: &#123;</div><div class="line">        ...</div><div class="line">        <span class="string">"queries"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="string">"rel"</span>: <span class="string">"search"</span>,</div><div class="line">                <span class="string">"href"</span>: <span class="string">"http://api.attracs.com/Orders/search"</span>,</div><div class="line">                <span class="string">"prompt"</span>: <span class="string">"Find Order"</span>,</div><div class="line">                <span class="string">"data"</span>: [</div><div class="line">                    &#123;<span class="string">"name"</span>: <span class="string">"search"</span>, <span class="string">"value"</span>: <span class="string">""</span>&#125;</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="string">"template"</span>: &#123;</div><div class="line">            <span class="string">"data"</span>: [</div><div class="line">                &#123;<span class="string">"name"</span>: <span class="string">"id"</span>, <span class="string">"value"</span>: <span class="string">""</span>, <span class="string">"prompt"</span>: <span class="string">"Order Id"</span>&#125;,</div><div class="line">                &#123;<span class="string">"name"</span>: <span class="string">"date"</span>, <span class="string">"value"</span>: <span class="string">""</span>, <span class="string">"prompt"</span>: <span class="string">"Order Date"</span>&#125;,</div><div class="line">                ...</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The basics of API design picked up by watching the PluralSight API Design Course&lt;br&gt;by Shawn Wildermuth.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also&lt;/strong&gt;
    
    </summary>
    
      <category term="APIs" scheme="http://kajlund.net/categories/APIs/"/>
    
    
      <category term="api" scheme="http://kajlund.net/tags/api/"/>
    
      <category term="architecture" scheme="http://kajlund.net/tags/architecture/"/>
    
      <category term="rest" scheme="http://kajlund.net/tags/rest/"/>
    
  </entry>
  
  <entry>
    <title>Mocha</title>
    <link href="http://kajlund.net/2015/08/31/mocha/"/>
    <id>http://kajlund.net/2015/08/31/mocha/</id>
    <published>2015-08-31T15:25:30.000Z</published>
    <updated>2017-06-11T12:54:59.580Z</updated>
    
    <content type="html"><![CDATA[<p>This doc assumes you are testing server-side code i.e. Node.js V8, not browser clients. Mocha can also run in browsers.</p>
<ul>
<li>Initially developed for NodeJS but has also gained popularity for client side JavaScript testing</li>
<li>Open Source, Cross-Browser client and node.js server support</li>
<li>Supports both TDD and BDD style testing</li>
<li>Supports asynchronous testing</li>
<li>Supports any JavaScript assertion library</li>
<li>Integrates with CI tools</li>
<li>Highlight slow tests</li>
<li>Before, after, before each, after each</li>
<li>Global variable leak detection</li>
</ul>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul>
<li>Either get <a href="https://github.com/visionmedia/mocha" target="_blank" rel="external">source from github</a> for  running in browser</li>
<li>or <code>npm install --save-dev mocha</code> for command line support</li>
<li>You can optionally also <code>npm install -g mocha</code> for convenience</li>
<li>Mocha doesn’t provide a default assertion library so typically you’d also install something like<br><a href="http://chaijs.com/" target="_blank" rel="external">chai</a> <code>npm install --save-dev chai</code>.</li>
</ul>
<blockquote>
<p>When running command line you are testing against the v8 engine which is fine for node apps but might not suffice for testing client-side.</p>
</blockquote>
<h2 id="Running-Tests"><a href="#Running-Tests" class="headerlink" title="Running Tests"></a>Running Tests</h2><p>There are a lot of different ways of setting up how to automatically test the code in browsers. A popular option that the AngularJS developer team uses is the <a href="http://karma-runner.github.io/0.12/index.html" target="_blank" rel="external">Karma</a> test runner. A simple option is to create an html-file for running the tests and open it in the different browsers you like to test your code in. For nodejs code you can run mocha from the command line, as an npm script or via the Gulp or Grunt task runners.</p>
<p>If you’ve installed mocha as a global node package you can run tests from the command line. <code>mocha mytests.js myothertest.js</code>.</p>
<p>Mocha by default can look for specific kinds of files. By default it will find a file called tests.js in the current dir. If you instead have all your test files under a directory called <code>test</code> mocha will find and run them all.</p>
<p>Mocha can also watch the files in your test directory and run whenever a file in the directory is changed. <code>mocha -w</code>.</p>
<p>Check the <a href="https://mochajs.org/" target="_blank" rel="external">mocha doc</a> Usage section for more info on params.</p>
<h2 id="Mocha-Features"><a href="#Mocha-Features" class="headerlink" title="Mocha Features"></a>Mocha Features</h2><p>The typical structure of a test file can be found <a href="https://gist.github.com/kajlund/81d4c2f432b4da5b8028" target="_blank" rel="external">here</a></p>
<h3 id="Setup-and-Teardown"><a href="#Setup-and-Teardown" class="headerlink" title="Setup and Teardown"></a>Setup and Teardown</h3><p>The <code>beforeEach</code> function is used to reset whatever we are testing to a fixed state before running each test (it function). The <code>afterEach</code> is similarly runs after each test.</p>
<h3 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping"></a>Grouping</h3><p>You can group tests together under a <code>describe</code> block as many levels as you want.</p>
<h3 id="Pending-Tests"><a href="#Pending-Tests" class="headerlink" title="Pending Tests"></a>Pending Tests</h3><p>Specifications not yet implemented. Just add the <code>it</code> functions using the description but without implementing the actual test.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should return NaN if passed 0 operands'</span>);</div><div class="line">it(<span class="string">'should return NaN if passed 1 operand'</span>);</div></pre></td></tr></table></figure>
<h3 id="Skipping-Tests"><a href="#Skipping-Tests" class="headerlink" title="Skipping Tests"></a>Skipping Tests</h3><p>You can skip all but a certain suite or test by calling <strong>.only</strong> after <strong>describe</strong> or <strong>it</strong> calls.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">describe.only(<span class="string">'Add'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">'should return the sum of both operands'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            expect(calc.add(<span class="number">1</span>, <span class="number">1</span>)).to.be(<span class="number">2</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">describe(<span class="string">'Add'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it.only(<span class="string">'should return the sum of both operands'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        expect(calc.add(<span class="number">1</span>, <span class="number">1</span>)).to.be(<span class="number">2</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>You can skip whole suites or certain tests in a suite by adding <strong>.skip</strong> after <strong>describe</strong> or <strong>it</strong> calls.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">describe.skip(<span class="string">'Add'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">'should return the sum of both operands'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            expect(calc.add(<span class="number">1</span>, <span class="number">1</span>)).to.be(<span class="number">2</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">describe(<span class="string">'Add'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it.skip(<span class="string">'should return the sum of both operands'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        expect(calc.add(<span class="number">1</span>, <span class="number">1</span>)).to.be(<span class="number">2</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Assertion-Libraries"><a href="#Assertion-Libraries" class="headerlink" title="Assertion Libraries"></a>Assertion Libraries</h2><ul>
<li>Mocha does not include any specific assertion libraries so you need to choose one.</li>
</ul>
<p>There are many popular assertion libraries to choose from:</p>
<ul>
<li>Chai</li>
<li>expect.js</li>
<li>should.js</li>
<li>many others</li>
</ul>
<h3 id="The-Chai-Assertion-Library"><a href="#The-Chai-Assertion-Library" class="headerlink" title="The Chai Assertion Library"></a>The Chai Assertion Library</h3><p>Chai js supports 3 popular assertion syntaxes:</p>
<ul>
<li>Assert</li>
<li>Expect</li>
<li>Should</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> assert = chai.assert;</div><div class="line"><span class="keyword">var</span> expect = chai.expect;</div><div class="line"><span class="keyword">var</span> should = chai.should();  <span class="comment">//Not IE friendly</span></div></pre></td></tr></table></figure>
<h4 id="Using-The-Expect-Syntax"><a href="#Using-The-Expect-Syntax" class="headerlink" title="Using The Expect Syntax"></a>Using The Expect Syntax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">expect(myVar).to.equal(<span class="number">3</span>);</div><div class="line">expect(myVar).to.be.a(<span class="string">'string'</span>);</div></pre></td></tr></table></figure>
<h2 id="Sinon"><a href="#Sinon" class="headerlink" title="Sinon"></a>Sinon</h2><h3 id="Spies"><a href="#Spies" class="headerlink" title="Spies"></a>Spies</h3><h3 id="Stubs"><a href="#Stubs" class="headerlink" title="Stubs"></a>Stubs</h3><h3 id="Mocks"><a href="#Mocks" class="headerlink" title="Mocks"></a>Mocks</h3><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li>Unit Testing with Node.js on Pluralsight</li>
<li>Node.js Testing Strategies on Pluralsight</li>
<li><a href="https://mochajs.org/" target="_blank" rel="external">Mocha</a></li>
<li><a href="http://chaijs.com/" target="_blank" rel="external">chai</a></li>
<li><a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">superagent</a></li>
<li><a href="https://github.com/request/request" target="_blank" rel="external">Request http library</a></li>
<li><a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">Should.js assertion library</a></li>
<li><a href="http://dareid.github.io/chakram/" target="_blank" rel="external">Chakram</a> REST API test framework</li>
<li><a href="http://www.mikeball.us/blog/testing-node-with-mocha-expect-and-nock/" target="_blank" rel="external">Testing node with Mocha, expect and noc</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This doc assumes you are testing server-side code i.e. Node.js V8, not browser clients. Mocha can also run in browsers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init
    
    </summary>
    
      <category term="Testing" scheme="http://kajlund.net/categories/Testing/"/>
    
    
      <category term="tdd" scheme="http://kajlund.net/tags/tdd/"/>
    
      <category term="bdd" scheme="http://kajlund.net/tags/bdd/"/>
    
      <category term="mocha" scheme="http://kajlund.net/tags/mocha/"/>
    
  </entry>
  
  <entry>
    <title>Single Page Applications</title>
    <link href="http://kajlund.net/2015/08/28/spa/"/>
    <id>http://kajlund.net/2015/08/28/spa/</id>
    <published>2015-08-28T15:25:30.000Z</published>
    <updated>2017-06-11T12:53:26.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h2><p>You could broadly categorize frameworks for building SPA’s into:</p>
<ul>
<li>JavaScript only frameworks</li>
<li>Thin JavaScript Layer frameworks</li>
<li>HTML Integration frameworks</li>
</ul>
<h3 id="JavaScript-only-Frameworks"><a href="#JavaScript-only-Frameworks" class="headerlink" title="JavaScript only Frameworks"></a>JavaScript only Frameworks</h3><p>With this approach you do pretty much all work using a JavaScript framework. You get a high level<br>of abstraction and don’t have to simultaneously have expert level knowledge on JavaScript, HTML<br>and CSS. On the other hand performance might suffer and your options in layout, widgets etc.<br>will be restricted by the framework used.</p>
<p>The Ext.js and Sencha Touch frameworks use this approach.</p>
<h3 id="Thin-JavaScript-Layer-Frameworks"><a href="#Thin-JavaScript-Layer-Frameworks" class="headerlink" title="Thin JavaScript Layer Frameworks"></a>Thin JavaScript Layer Frameworks</h3><p>This approach combines the traditional techniques of HTML, CSS and JavaScript. You have less<br>abstraction but probably better performance.</p>
<p>This is perhaps the most common approach and it allows for great flexibility in choosing tools,<br>libraries, widgets etc. The downside of using this approach compared to JavaScript only frameworks<br>is that you apart from knowing JavaScript + libraries also need to know HTML and CSS.</p>
<p>Using this approach the first library to enter the toolbox is typically jQuery. Be aware that if<br>you are building something non-trivial you’re going to want more than jQuery as the code base grows.<br>Typically you’d add some kind of client-side MVC framework for structure and maintainability.</p>
<h3 id="HTML-Integration-Frameworks"><a href="#HTML-Integration-Frameworks" class="headerlink" title="HTML Integration Frameworks"></a>HTML Integration Frameworks</h3><p>This approach in contrast to the JavaScript only Frameworks tries to extend the HTML syntax to better<br>suit building applications. Typically you bind to HTML elements using special syntax (html5 data<br>attributes) and lean on dependency injection.</p>
<p>AngularJS and jQuery Mobile use this approach.</p>
<h2 id="Components-of-a-SPA-Framework"><a href="#Components-of-a-SPA-Framework" class="headerlink" title="Components of a SPA Framework"></a>Components of a SPA Framework</h2><p>There’s no end to the amount of libraries, widgets and different levels of frameworks available<br>for building SPA’s. Here’s some categories of stuff you’d be looking for sooner or later depending<br>on the size of your project.</p>
<ul>
<li>Languages</li>
<li>Structure</li>
<li>Routing</li>
<li>Data model</li>
<li>User Interface Handling</li>
<li>Generic Libraries</li>
<li>Tools<ul>
<li>Package Management</li>
<li>Syntax Checking</li>
<li>ALM Tools</li>
<li>Profiling</li>
<li>Testing</li>
</ul>
</li>
</ul>
<h3 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h3><p>To build an application you’ll need a programming language. For client side web applications the only consistently available programming language in web browsers is JavaScript.</p>
<p>That said, new languages that can be compiled to JavaScript become available all the time. Maybe the major ones at the time I write this are:</p>
<ul>
<li><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a></li>
<li><a href="http://www.dartlang.org/" target="_blank" rel="external">Dart</a></li>
<li><a href="http://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a></li>
</ul>
<p>I think that among the above mentioned TypeScript seems most interesting. The reason is that the philosophy is to provide what JS will eventually support plus optionally strong typing.</p>
<h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><p>If you intend to build something non trivial you’d need to organize your code for maintainability.<br>Many of the client side frameworks provide some form of MVC or MVVM pattern for keeping things<br>under control.</p>
<p>If you’re not using any particular framework, you should have a look at module handling using<br><a href="http://en.wikipedia.org/wiki/Asynchronous_module_definition" target="_blank" rel="external">AMD</a> like <a href="http://requirejs.org/" target="_blank" rel="external">Require.js</a><br>or <a href="http://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="external">CommonJS</a> like <a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>.</p>
<p>Most of the SPA frameworks like will provide their own ideas on how to structure your application.</p>
<h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p>Routing is an important part of a SPA and concerns how to map URL changes in the browser to code in your<br>application.</p>
<p>Some of the more popular client side SPA frameworks like AngularJS and ember.js contain functionality for<br>route handling.</p>
<p>There are libraries that only do route handling that you could adapt as well.</p>
<h3 id="Data-Model"><a href="#Data-Model" class="headerlink" title="Data Model"></a>Data Model</h3><p>Implementing client-side data models is one major thing that sets a library like jQuery apart from a<br>proper SPA framework like Angular.js and ember.js.</p>
<p>Using jQuery your client side data model is often in the DOM. This is usually OK for simple scenarios but<br>starts to break down when you build more complex applications.</p>
<p>Many frameworks allow you to define your objects and lists in your application and support data binding<br>for updates between UI and data model.</p>
<p>Model-Collection-Sync</p>
<h3 id="User-Interface-Handling"><a href="#User-Interface-Handling" class="headerlink" title="User Interface Handling"></a>User Interface Handling</h3><ul>
<li>Grid Systems</li>
<li>Layout/Styling (Bootstrap et. al.)</li>
<li>View Templating (handlebars, underscore)</li>
<li>Data binding</li>
<li><p>Preprocessors (LESS/SASS)</p>
</li>
<li><p>Widgets (Typically based on jQuery)</p>
</li>
</ul>
<p>The larger frameworks typically include routers and module handling capabilities as well. The functionality provided by the larger MVC frameworks can be pieced together using smaller frameworks like Backbone.js, Can.js, Knockout.js and many, many others.</p>
<h3 id="Generic-Libraries"><a href="#Generic-Libraries" class="headerlink" title="Generic Libraries"></a>Generic Libraries</h3><ul>
<li>jQuery, Zepto, underscore</li>
<li>Polyfills (es5shim, modernizr)</li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><h4 id="Package-Management"><a href="#Package-Management" class="headerlink" title="Package Management"></a>Package Management</h4><ul>
<li><a href="https://github.com/bower/bower" target="_blank" rel="external">Bower</a></li>
</ul>
<h4 id="Syntax-Checkers"><a href="#Syntax-Checkers" class="headerlink" title="Syntax Checkers"></a>Syntax Checkers</h4><ul>
<li>JsLint/JsHint</li>
</ul>
<h4 id="ALM-tools"><a href="#ALM-tools" class="headerlink" title="ALM tools"></a>ALM tools</h4><ul>
<li>(Node.js + Grunt.js for minification, linting, concatenation and running tests)</li>
</ul>
<h4 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h4><ul>
<li>YSlow</li>
</ul>
<h3 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h3><ul>
<li>QUnit</li>
<li>Mocha</li>
<li>Jasmine</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Categories&quot;&gt;&lt;a href=&quot;#Categories&quot; class=&quot;headerlink&quot; title=&quot;Categories&quot;&gt;&lt;/a&gt;Categories&lt;/h2&gt;&lt;p&gt;You could broadly categorize framework
    
    </summary>
    
      <category term="Architecture" scheme="http://kajlund.net/categories/Architecture/"/>
    
    
      <category term="architecture" scheme="http://kajlund.net/tags/architecture/"/>
    
      <category term="javascript" scheme="http://kajlund.net/tags/javascript/"/>
    
      <category term="spa" scheme="http://kajlund.net/tags/spa/"/>
    
  </entry>
  
  <entry>
    <title>Gulp Recipes</title>
    <link href="http://kajlund.net/2015/07/15/gulp-recipes/"/>
    <id>http://kajlund.net/2015/07/15/gulp-recipes/</id>
    <published>2015-07-15T15:25:30.000Z</published>
    <updated>2017-06-11T13:03:06.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Generic-Tasks"><a href="#Generic-Tasks" class="headerlink" title="Generic Tasks"></a>Generic Tasks</h2><h3 id="Cleaning-Folders"><a href="#Cleaning-Folders" class="headerlink" title="Cleaning Folders"></a>Cleaning Folders</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> delFiles = [].concat(config.buildFolder, config.tempFolder);</div><div class="line">    log(<span class="string">'Cleaning: '</span> + plug.utils.color.blue(delFiles));</div><div class="line">    del(delFiles, done);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean-fonts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    clean(<span class="string">'./build/fonts/**/*.*'</span>, done);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean-images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    clean(<span class="string">'./build/img/**/*.*'</span>, done);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean-styles'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    clean(<span class="string">'./build/css/**/*.css'</span>, done);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'fonts'</span>, [<span class="string">'clean-fonts'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...</div><div class="line">gulp.task(<span class="string">'images'</span>, [<span class="string">'clean-images'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...</div><div class="line">gulp.task(<span class="string">'styles'</span>, [<span class="string">'clean-styles'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">path, done</span>) </span>&#123;</div><div class="line">    log(<span class="string">'Cleaning: '</span> + plug.util.colors.blue(path));</div><div class="line">    del(path, done);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> item;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (msg) === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (item <span class="keyword">in</span> msg) &#123;</div><div class="line">            <span class="keyword">if</span> (msg.hasOwnProperty(item)) &#123;</div><div class="line">                plug.util.log(plug.util.colors.blue(msg[item]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        plug.util.log(plug.util.colors.blue(msg));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Automatic-Page-Reloads"><a href="#Automatic-Page-Reloads" class="headerlink" title="Automatic Page Reloads"></a>Automatic Page Reloads</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><ul>
<li>Prepare CSS and HTML</li>
<li>Restart on node server changes</li>
</ul>
<p><a href="https://github.com/remy/nodemon" target="_blank" rel="external">Nodemon</a> can restart, watch for changes and handle different events. The<br> gulp plugin is called gulp-nodemon. It adds supports for calling other gulp tasks on different events.</p>
<pre><code>npm install --save-dev gulp-nodemon
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'server'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> plug.nodemon(&#123;</div><div class="line">            <span class="attr">script</span>: <span class="string">'server.js'</span>,</div><div class="line">            <span class="attr">delayTime</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">watch</span>: config.serverSourceFiles</div><div class="line">        &#125;)</div><div class="line">        .on(<span class="string">'restart'</span>, [<span class="string">'vet'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">            log(<span class="string">'*** nodemon restarted server'</span>);</div><div class="line">            log(<span class="string">'files changed on restart:\n'</span> + ev);</div><div class="line">        &#125;)</div><div class="line">        .on(<span class="string">'start'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            log(<span class="string">'*** nodemon started monitoring'</span>);</div><div class="line">        &#125;)</div><div class="line">        .on(<span class="string">'crash'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            log(<span class="string">'*** nodemon crashed: script crashed for some reason'</span>);</div><div class="line">        &#125;)</div><div class="line">        .on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            log(<span class="string">'*** nodemon exited cleanly'</span>);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Before restarting we’ll call the vet task to verify code.</p>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><ul>
<li>Launch server</li>
<li>Launch browser</li>
<li>Restart/refresh on changes</li>
</ul>
<p><a href="http://www.browsersync.io" target="_blank" rel="external">BrowserSync</a> can watch client-side files and<br>automatically inject changes (using sockets.io) into the browser(s).</p>
<p>It can also synchronize actions across browsers. This functionality is referred<br>to as ghost-mode and it can sync clicks, forms, locations and scrolling across<br>multiple browsers. Install with command <code>npm install --save-dev browser-sync</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">.on(<span class="string">'restart'</span>, [<span class="string">'vet'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">    log(<span class="string">'*** nodemon restarted server'</span>);</div><div class="line">    log(<span class="string">'files changed on restart:\n'</span> + ev);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        browserSync.notify(<span class="string">'reloading now...'</span>);</div><div class="line">        browserSync.reload(&#123;<span class="attr">stream</span>:<span class="literal">false</span>&#125;);</div><div class="line">     &#125;, <span class="number">1000</span>);</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'start'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    log(<span class="string">'*** nodemon started monitoring'</span>);</div><div class="line">    startBrowserSync();</div><div class="line">&#125;)</div><div class="line">...</div><div class="line"></div><div class="line">function startBrowserSync () &#123;</div><div class="line">    <span class="keyword">if</span> (browserSync.active) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    log(<span class="string">'Starting browser-sync on port 3001'</span>);</div><div class="line">    gulp.watch(conf.lessFiles, [<span class="string">'styles'</span>]);</div><div class="line"></div><div class="line">    browserSync.init(&#123;</div><div class="line">        <span class="attr">proxy</span>: <span class="string">'localhost:3000'</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">3001</span>,</div><div class="line">        <span class="attr">files</span>: [</div><div class="line">            <span class="string">'./**/*.*'</span>,</div><div class="line">            <span class="string">'!./**/*.less'</span></div><div class="line">        ],</div><div class="line">        <span class="attr">ghostMode</span>: &#123;</div><div class="line">            <span class="attr">clicks</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">location</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">forms</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">scroll</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">injectChanges</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">logFileChanges</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">logLevel</span>: <span class="string">'debug'</span>,</div><div class="line">        <span class="attr">logPrefix</span>: <span class="string">'SYNC'</span>,</div><div class="line">        <span class="attr">notify</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">reloadDelay</span>: <span class="number">1000</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Code-Analysis-a-k-a-Linting"><a href="#Code-Analysis-a-k-a-Linting" class="headerlink" title="Code Analysis a.k.a. Linting"></a>Code Analysis a.k.a. Linting</h2><blockquote>
<p>As of summer 2016 I’ve dropped JSHint and JSCS in favor of eslint.</p>
</blockquote>
<p>These are 3 popular tools for code analysis:</p>
<ul>
<li><a href="http://eslint.org/" target="_blank" rel="external">eslint</a></li>
<li><a href="http://jshint.com/" target="_blank" rel="external">JSHint</a> - <a href="http://jshint.com/docs/" target="_blank" rel="external">docs</a></li>
<li><a href="http://jscs.info/" target="_blank" rel="external">JSCS</a> - <a href="https://github.com/jscs-dev/node-jscs" target="_blank" rel="external">Github</a></li>
</ul>
<p>JSHint is a popular code analysis tool that can detect syntax errors and other potential problems in your source code. Define your rules in a file called <code>.jshintrc</code></p>
<pre><code>npm install --save-dev gulp-jshint jshint-stylish
</code></pre><p>JSCS is a JavaScript Code Style Checker. You can use it to define a style guide for code consistency and enforce it using JSCS. Define your rules in a file called <code>.jscsrc</code></p>
<pre><code>npm install --save-dev gulp-jscs gulp-jscs-stylish
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    plug = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)(&#123;<span class="attr">lazy</span>: <span class="literal">true</span>&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'vet'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp</div><div class="line">        .src(<span class="string">'./app/**/*.js'</span>)</div><div class="line">        .pipe(plug.jshint())</div><div class="line">        .pipe(plug.jscs())</div><div class="line">        .on(<span class="string">'error'</span>, noop)</div><div class="line">        .pipe(plug.jscsStylish.combineWithHintResults())</div><div class="line">        .pipe(plug.jshint.reporter(<span class="string">'jshint-stylish'</span>, &#123;<span class="attr">verbose</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> noop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<h2 id="Transpile-CSS"><a href="#Transpile-CSS" class="headerlink" title="Transpile CSS"></a>Transpile CSS</h2><p>If you want to use LESS or SASS you need to transpile your files to CSS.</p>
<p>You can use <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">AutoPrefixer</a> to add vendor browser prefixes automatically. AutoPrefixer is kept in sync with <a href="http://caniuse.com" target="_blank" rel="external">Can I Use</a></p>
<pre><code>npm install --save-dev gulp-less gulp-autoprefixer
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'styles'</span>, [<span class="string">'clean-styles'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    log(<span class="string">'Compiling LESS --&gt; CSS'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp</div><div class="line">        .src(<span class="string">'./styles/*.less'</span>)</div><div class="line">        .pipe(plug.less())</div><div class="line">        .pipe(plug.autoprefixer(&#123;<span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 5%'</span>] &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./tmp'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean-styles'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    clean(<span class="string">'./tmp/**/*.css'</span>, done);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">path, done</span>) </span>&#123;</div><div class="line">    log(<span class="string">'Cleaning: '</span> + plug.util.colors.blue(path));</div><div class="line">    del(path, done);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.style-test</span> &#123;</div><div class="line">    <span class="attribute">transform-origin</span>: center bottom;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.style-test</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform-origin</span>: center bottom;</div><div class="line">          <span class="attribute">transform-origin</span>: center bottom;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The ‘clean’ is not a gulp plugin and thus doesn’t return a stream. In these cases we declare a callback and call it after we’re finished so that things are executed in the right order.</p>
<h2 id="Angular-Template-Cache"><a href="#Angular-Template-Cache" class="headerlink" title="Angular Template Cache"></a>Angular Template Cache</h2><p>AngularJS apps use view templates for routes and directives. These can either be loaded dynamically via AJAX calls or added to the AngularJS $templateCache service to avoid http traffic when loading them. You would add a template by calling <code>$templateCache.$put(&#39;url&#39;, &#39;template&#39;);</code>. When a route or directive needs to load an html template, Angular will check the template cache before doing an http call.</p>
<p>Instead of using the $templateCache service manually we can use a gulp plugin like <a href="https://github.com/miickel/gulp-angular-templatecache" target="_blank" rel="external">gulp-angular-templatecache</a>. This plugin can gather all templates and add them to the $templateCache service. We can also minify the html if we want to save space. The plugin will compile our html templates to a single file and can generate an angular module to be included in our app.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// clean build and temp folders</span></div><div class="line">gulp.task(<span class="string">'clean-build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> delFiles = [].concat(<span class="string">'./temp/**/*.js'</span>, <span class="string">'./build/**/*.html'</span>, <span class="string">'./build/**/*.js'</span>);</div><div class="line">    clean(delFiles, done);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'templatecache'</span>, [<span class="string">'clean-build'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    log(<span class="string">'Creating AngularJS $templateCache'</span>);</div><div class="line">    <span class="comment">// SAMPLE config object</span></div><div class="line">    <span class="keyword">var</span> config = &#123;</div><div class="line">        <span class="attr">htmlTemplates</span>: <span class="string">'./app/**/*.html'</span>, <span class="comment">// avoid index.html</span></div><div class="line">        templateCache = &#123;</div><div class="line">       			<span class="attr">file</span>: <span class="string">'templates.js'</span>,</div><div class="line">          	<span class="attr">options</span>: &#123;</div><div class="line">       		      <span class="attr">module</span>: <span class="string">'app'</span>,</div><div class="line">          		  <span class="attr">standAlone</span>: <span class="literal">false</span>,</div><div class="line">          		  <span class="attr">root</span>: <span class="string">'app/'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src(config.htmlTemplates)</div><div class="line">    		.pipe(plug.minifyHtml(&#123;<span class="attr">empty</span>: <span class="literal">true</span>&#125;))</div><div class="line">    		.pipe(plug.angularTemplateCache(config.templateCache.file, config.templateCache.options))</div><div class="line">        .pipe(gulp.dest(config.tempFolder));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Image-Minification"><a href="#Image-Minification" class="headerlink" title="Image Minification"></a>Image Minification</h2><p>You can use <a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a> for image minification.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'imagemin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    log(<span class="string">'Compress images and copy to build folder'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src(config.images)</div><div class="line">        .pipe(plug.imagemin(&#123;<span class="attr">optimizationLevel</span>: <span class="number">3</span>&#125;))</div><div class="line">        .pipe(<span class="string">'./build/img'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="html-injection"><a href="#html-injection" class="headerlink" title="html injection"></a>html injection</h2><p>Automating adding the needed dependencies to the html file. For 3rd party dependencies you can use <a href="https://github.com/taptapship/wiredep" target="_blank" rel="external">Wiredep</a> to inject bower dependencies into HTML.</p>
<p>You would use HTML comments as placeholders. The type should be either <code>css</code> or <code>js</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- bower:type --&gt;</div></pre></td></tr></table></figure>
<p>For custom code use you can use <a href="https://github.com/klei/gulp-inject" target="_blank" rel="external">gulp-inject</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- inject:type --&gt;</div></pre></td></tr></table></figure>
<p>Separating between 3rd party CSS/JS and our own</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"app"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- bower:css --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- endbower --&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- inject:css --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- endinject --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"'app/layout/shell.html'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- endbower --&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- inject:js --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- endinject --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>wiredep injects the runtime css dependencies at <code>&lt;!-- bower:css --&gt;</code> and the javascript dependencies at <code>&lt;!-- bower:js --&gt;</code>. Wiredep uses the bower.json files of the 3rd party packages to figure out the dependencies i.e. what to load and loading order.</p>
<p>gulp-inject injects the runtime css dependencies at <code>&lt;!-- inject:css --&gt;</code> and the javascript dependencies at <code>&lt;!-- inject:js --&gt;</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Generic-Tasks&quot;&gt;&lt;a href=&quot;#Generic-Tasks&quot; class=&quot;headerlink&quot; title=&quot;Generic Tasks&quot;&gt;&lt;/a&gt;Generic Tasks&lt;/h2&gt;&lt;h3 id=&quot;Cleaning-Folders&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="Automation" scheme="http://kajlund.net/categories/Automation/"/>
    
    
      <category term="gulp" scheme="http://kajlund.net/tags/gulp/"/>
    
      <category term="automation" scheme="http://kajlund.net/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>Git Basics</title>
    <link href="http://kajlund.net/2014/10/26/git-basics/"/>
    <id>http://kajlund.net/2014/10/26/git-basics/</id>
    <published>2014-10-26T16:25:30.000Z</published>
    <updated>2017-06-11T13:03:48.350Z</updated>
    
    <content type="html"><![CDATA[<p>Git is a modern centralized version control system that has almost become a de facto standard.</p>
<h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>Git came about in 2005 when the Linux kernel project could no longer use BitKeeper for free. This prompted Linus Torvalds and the Linux kernel team to develop their own tool based on the lessons learned using other VCS.</p>
<h3 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h3><p>Git thinks about it’s data somewhat differently than you might be used to. Git does not store differences in deltas but stores snapshots of your entire project. It never stores the same thing twice so this is not as inefficient as it might sound.</p>
<p>Everything you store is referred to using a SHA-1 hash calculated based on the contents of a file or directory structure. This should also help notice any changes or file corruption happening on your disk.</p>
<p>Git generally only adds data to a repository so once something is committed it’s hard to loose that work.</p>
<h5 id="Three-States"><a href="#Three-States" class="headerlink" title="Three States"></a>Three States</h5><p>A Git project folder contains <strong>3 areas</strong>. A working directory, a staging area and the Git repository.</p>
<p>In the working directory files are either <strong>tracked</strong> or <strong>untracked</strong>. Tracked files are files that were part of the latest commit. Tracked files can be <strong>unmodified</strong>, <strong>modified</strong> or <strong>staged</strong>. Untracked files are the rest, namely files in your working folder that were not a part of latest snapshot and are not in the staging area. After cloning a repository all files in your working folder will be tracked and unmodified.</p>
<p>As soon as a file in the working directory is changed Git will display them as modified. The modified files are <strong>staged</strong> and <strong>committed</strong> and the cycle repeats.</p>
<p><strong>Checking out</strong> means copying from the repository to the working directory, <strong>staging</strong> means copying current state from the working directory to the staging area and <strong>committing</strong> means saving current staging area state to the repository.</p>
<p>The Git repository (.git directory) stores the committed data plus metadata. This is what you would clone when cloning a repository.</p>
<p>The working directory is a single checkout of one version of the project. The files are pulled out of the repo by git and placed here for you.</p>
<p>The staging area is a file containing information on what will go into your next commit. The staging area is sometimes referred to as the <strong>index</strong>.</p>
<h3 id="Basic-Workflow"><a href="#Basic-Workflow" class="headerlink" title="Basic Workflow"></a>Basic Workflow</h3><ul>
<li>Modify files in your working directory</li>
<li>Stage files (snapshot them in staging area)</li>
<li>Commit - Store staging area snapshot permanently in repo.</li>
</ul>
<h2 id="Setup-and-Configuration"><a href="#Setup-and-Configuration" class="headerlink" title="Setup and Configuration"></a>Setup and Configuration</h2><h3 id="Installing-Git"><a href="#Installing-Git" class="headerlink" title="Installing Git"></a>Installing Git</h3><p>On Mac, either use <a href="http://code.google.com/p/git-osx-installer/" target="_blank">Git OSX Installer</a> from Google Code or install it via <a title="The HomeBrew Package Manager" href="http://www.kajlund.net/homebrew/" target="_blank">HomeBrew</a> using the command <code>$ brew install git</code>.</p>
<p>On windows you can use the standard Git installer found <a href="http://git-scm.com/download/win" target="_blank" rel="external">here</a> or the msysgit one found <a href="https://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git" target="_blank" rel="external">here</a>.</p>
<p> You could also use the guide provided by Github found <a href="https://help.github.com/articles/set-up-git" target="_blank" rel="external">here</a></p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><p>All Git configuration files are simple text files and can thus easily be moved between machines etc.</p>
<p>Configurations can be changed via the <code>git config</code> command or directly by editing the configuration files. Configurations can be made on system-, user- and repository levels.</p>
<h6 id="System-level"><a href="#System-level" class="headerlink" title="System level"></a>System level</h6><p>System level configurations have the lowest precedence and can be manipulated via the  <code>--system</code> option.</p>
<p>On a Mac it’s <code>/etc/gitconfig</code> and on Windows <code>\Program Files\Git\etc\gitconfig</code>.</p>
<h6 id="User-level"><a href="#User-level" class="headerlink" title="User level"></a>User level</h6><p>User level settings are use the global directive like <code>git config --global</code></p>
<p>On a Mac the config file is <code>~/.gitconfig</code>. On Windows it is <code>%userprofile%\.gitconfig</code>.</p>
<pre><code>$ git config --list                           # List all user settings
$ git config --global user.name &quot;Your Name&quot;   # Set user name &amp; email
$ git config --global user.email &quot;your_email@somedomain.com&quot;
$ git config --global apply.whitespace nowarn # Make Git ignore whitespace changes
$ git config --global core.editor &quot;notepad.exe&quot; # Set Notepad as editor for commit messages.
$ git config --global core.editor &quot;\&quot;c:\Program Files\Notepad++\notepad++.exe\&quot;&quot;
$ git config --global color.ui true
</code></pre><h6 id="Repository-level"><a href="#Repository-level" class="headerlink" title="Repository level"></a>Repository level</h6><ul>
<li><code>git config</code></li>
<li><p>Project folder/.git/config</p>
<p>$ git config –list             # List all settings<br>$ git config user.name          # Display current user.name setting<br>$ git config user.name luka     # Set user name for this repo only<br>$ git config –unset user.email # Remove email setting for this repo only</p>
</li>
</ul>
<h4 id="Command-Aliases"><a href="#Command-Aliases" class="headerlink" title="Command Aliases"></a>Command Aliases</h4><p>Command aliases can be added to your settings for convenience.</p>
<pre><code>$ git config --global alias.show-graph log --graph --abbrev-commit --pretty=oneline
$ git config --global alias.co checkout
</code></pre><h3 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h3><p>The following 3 commands basically all do the same thing, namely displays the help page for the command in question. The man command is *nix-only though.</p>
<pre><code>$ git help &lt;command&gt;
$ git &lt;command&gt; --help
$ man git-&lt;command&gt;
</code></pre><h6 id="Some-Resources-for-More-Git-Knowledge"><a href="#Some-Resources-for-More-Git-Knowledge" class="headerlink" title="Some Resources for More Git Knowledge"></a>Some Resources for More Git Knowledge</h6><ul>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git web site</a></li>
<li><a href="http://gitref.org/" target="_blank" rel="external">Git Reference</a></li>
<li><a href="http://www.youtube.com/GitHubGuides" target="_blank" rel="external">GitHubGuides</a> is a YouTube channel by GitHub</li>
<li><a href="http://try.github.io/" target="_blank" rel="external">Try Git</a> in your browser</li>
<li><a href="http://tom.preston-werner.com/2009/05/19/the-git-parable.html" target="_blank" rel="external">The Git Parable</a></li>
<li><a href="http://gitimmersion.com/index.html" target="_blank" rel="external">Git Immersion tutorial</a></li>
<li><a href="http://git-scm.com/book" target="_blank" rel="external">Pro Git online book</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/" target="_blank" rel="external">Git Magic</a></li>
</ul>
<h6 id="Some-Resources-for-more-GitHub-Knowledge"><a href="#Some-Resources-for-more-GitHub-Knowledge" class="headerlink" title="Some Resources for more GitHub Knowledge"></a>Some Resources for more GitHub Knowledge</h6><ul>
<li><a href="https://help.github.com/" target="_blank" rel="external">GitHub Help</a></li>
<li><a href="https://teach.github.com/" target="_blank" rel="external">GitHub official teaching materials</a></li>
<li><a href="https://training.github.com/" target="_blank" rel="external">GitHub Training</a></li>
<li><a href="https://developer.github.com/" target="_blank" rel="external">GitHub API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git is a modern centralized version control system that has almost become a de facto standard.&lt;/p&gt;
&lt;h3 id=&quot;History&quot;&gt;&lt;a href=&quot;#History&quot; cl
    
    </summary>
    
      <category term="SCM" scheme="http://kajlund.net/categories/SCM/"/>
    
    
      <category term="tools" scheme="http://kajlund.net/tags/tools/"/>
    
      <category term="git" scheme="http://kajlund.net/tags/git/"/>
    
      <category term="scm" scheme="http://kajlund.net/tags/scm/"/>
    
  </entry>
  
  <entry>
    <title>Jasmine</title>
    <link href="http://kajlund.net/2014/06/15/jasmine/"/>
    <id>http://kajlund.net/2014/06/15/jasmine/</id>
    <published>2014-06-15T15:25:30.000Z</published>
    <updated>2017-06-11T13:02:07.915Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://jasmine.github.io/" target="_blank" rel="external">Jasmine</a> is a popular Open Source BDD testing framework that supports both client-side and server-side testing.</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>The easiest way to get started is to download a standalone <a href="https://github.com/jasmine/jasmine/releases" target="_blank" rel="external">Jasmine release</a>, unzip it, copy into your project and start testing. It contains a SpecRunner.html that you open for running your tests. For automated test running you can use your favorite IDE or [[Karma]]</p>
<h2 id="Describe-Blocks"><a href="#Describe-Blocks" class="headerlink" title="Describe Blocks"></a>Describe Blocks</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* tests */</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    describe(<span class="string">'when new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/* tests */</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Writing-Tests"><a href="#Writing-Tests" class="headerlink" title="Writing Tests"></a>Writing Tests</h3><ul>
<li>it()</li>
<li>beforeEach &amp; afterEach</li>
<li>Matchers &amp; Custom Matchers</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sut;</div><div class="line"></div><div class="line">    beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        sut = <span class="keyword">new</span> SUT();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/* cleanup code */</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it(<span class="string">'should be able to play a song'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/* code and assertions */</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Matchers"><a href="#Matchers" class="headerlink" title="Matchers"></a>Matchers</h3><ul>
<li>expect(x).toEqual(y);</li>
<li>expect(x).toBe(y); // ===</li>
<li>expect(x).toMatch(pattern); //regex</li>
<li>expect(x).toBeDefined();</li>
<li>expect(x).toBeUndefined();</li>
<li>expect(x).toBeNull();</li>
<li>expect(x).toBeTruthy();</li>
<li>expect(x).toBeFalsy();</li>
<li>expect(x).toContain(y);</li>
<li>expect(x).toBeLessThan(y);</li>
<li>expect(x).toBeGreaterThan(y);</li>
<li>expect(function() {fn();}).toThrow(ex);</li>
</ul>
<p>You can negate these matchers by expressing expect(x).not.toBe…</p>
<h4 id="Custom-Matchers"><a href="#Custom-Matchers" class="headerlink" title="Custom Matchers"></a>Custom Matchers</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.addMatchers(&#123;</div><div class="line">        <span class="attr">toBeFive</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.actual === <span class="number">5</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Calculator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Calculator.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Calculator.prototype.divide = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a / b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">"Calculator"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> calc;</div><div class="line"></div><div class="line">	beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		calc = <span class="keyword">new</span> Calculator();</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.addMatchers(&#123;</div><div class="line">			<span class="attr">toBeBetween</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.actual &gt;= a &amp;&amp; <span class="keyword">this</span>.actual &lt;= b;</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	it(<span class="string">"should be able to add 1 and 1"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		expect(calc.add(<span class="number">1</span>, <span class="number">1</span>)).toBe(<span class="number">2</span>);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	it(<span class="string">"should be able to divide 6 and 2"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		expect(calc.divide(<span class="number">6</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	it(<span class="string">"should be able to divide a rational number"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//expect(calc.divide(1, 3)).toBeGreaterThan(0.3);</span></div><div class="line">		<span class="comment">//expect(calc.divide(1, 3)).toBeLessThan(0.4);</span></div><div class="line">		expect(calc.divide(<span class="number">1</span>, <span class="number">3</span>)).toBeBetween(<span class="number">0.3</span>, <span class="number">0.34</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Running-Tests"><a href="#Running-Tests" class="headerlink" title="Running Tests"></a>Running Tests</h3><ul>
<li>Runs in the browser</li>
<li>Passed and skipped tests are hidden by default</li>
<li>Tests can be filtered by describe block or individual test</li>
<li>To skip a test add an x in front of the describe- or it declaration</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xit(<span class="string">'should be skipped'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* this test should be skipped */</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xdescribe(<span class="string">'MyClass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* all tests inside are skipped */</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Jasmine-Spies"><a href="#Jasmine-Spies" class="headerlink" title="Jasmine Spies"></a>Jasmine Spies</h2><ul>
<li>Mostle represents a subset of the functionality provided by sinon.</li>
<li>Built for mocking single functions</li>
<li>Supports both replacement and pass-through mocking</li>
<li>Has many built in matchers</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://jasmine.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jasmine&lt;/a&gt; is a popular Open Source BDD testing framework that suppor
    
    </summary>
    
      <category term="Testing" scheme="http://kajlund.net/categories/Testing/"/>
    
    
      <category term="jasmine" scheme="http://kajlund.net/tags/jasmine/"/>
    
      <category term="tdd" scheme="http://kajlund.net/tags/tdd/"/>
    
      <category term="bdd" scheme="http://kajlund.net/tags/bdd/"/>
    
  </entry>
  
  <entry>
    <title>qUnit</title>
    <link href="http://kajlund.net/2014/05/17/qunit/"/>
    <id>http://kajlund.net/2014/05/17/qunit/</id>
    <published>2014-05-17T15:25:30.000Z</published>
    <updated>2017-06-11T12:54:17.671Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Some-Resources"><a href="#Some-Resources" class="headerlink" title="Some Resources"></a>Some Resources</h4><ul>
<li><a href="http://qunitjs.com/" target="_blank" rel="external">QUnit website</a></li>
<li><a href="https://github.com/jquery/qunit" target="_blank" rel="external">QUnit github page</a></li>
</ul>
<h2 id="About-QUnit"><a href="#About-QUnit" class="headerlink" title="About QUnit"></a>About QUnit</h2><ul>
<li>QUnit is a full featured unit testing framework for JavaScript similar to JUnit, NUnit et.al.</li>
<li>It was built by the jQuery team for testing the jQuery codebase.</li>
<li>It has no dependencies and can also be used to test server-side code</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>QUnit Test Suite<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"qunit.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"qunit.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tests.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qunit"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qunit-fixture"</span>&gt;</span>test markup<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test(<span class="string">'my first test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	ok(<span class="literal">true</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="QUnit-Assertions"><a href="#QUnit-Assertions" class="headerlink" title="QUnit Assertions"></a>QUnit Assertions</h3><p>The message param is optional. Normally prefer strictEqual to equal.</p>
<ul>
<li>ok(expression, message)</li>
<li>equal(actual, expected, message)</li>
<li>deepEqual(actual, expected, message)</li>
<li>notDeepEqual(actual, expected, message)</li>
<li>strictEqual(actual, expected, message)</li>
<li>notStrictEqual(actual, expected, message)</li>
<li>raises(actual, expected, message)</li>
</ul>
<h2 id="QUnit-Modules"><a href="#QUnit-Modules" class="headerlink" title="QUnit Modules"></a>QUnit Modules</h2><ul>
<li>The purpose of modules is to group tests logically and for having tests share a setup and teardown method that runs before and after each test.</li>
<li>Any test following a module declaration belongs to that module. Each module can have its own setup and teardown method for all the tests belonging to that module.</li>
<li>A common setup is used for sharing common objects among tests in the group. Also a good place to set up the DOM for the tests. A common teardown is good for cleaning up DOM changes and other more generic cleanup.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>(<span class="string">'module 1'</span>);</div><div class="line"></div><div class="line">test(<span class="string">'my first test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	ok(<span class="literal">true</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>(<span class="string">'module 2'</span>, &#123;</div><div class="line">    <span class="attr">setup</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">teardown</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">test(<span class="string">'my second test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	ok(<span class="literal">true</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Running-QUnit-Tests"><a href="#Running-QUnit-Tests" class="headerlink" title="Running QUnit Tests"></a>Running QUnit Tests</h2><p>You run tests by opening the html testrunner file. You can use multiple testrunner files to group your tests as your library of tests grow. There&rsquo;s a QUnit Composite where you can combine multiple testrunners into one html file. If you are using Visual Studio ReSharper has great support for running tests from inside the IDE.</p>
<h3 id="Testing-the-DOM"><a href="#Testing-the-DOM" class="headerlink" title="Testing the DOM"></a>Testing the DOM</h3><p>Don’t test how the page looks. Test that our system changes the DOM like expected. Test that you can read things from the DOM that should be there.</p>
<figure class="highlight plain"><figcaption><span>test', function () &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	strictEqual($(&apos;#myDiv&apos;).length, 1);</div><div class="line">    strictEqual($(&apos;#myDiv&apos;).text(), &apos;Hello World!&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="CI-Integration"><a href="#CI-Integration" class="headerlink" title="CI Integration"></a>CI Integration</h2><p>You can integrate with CI tools by having PhantomJS run the tests and produce some output that the CI tool can interpret as success or failure.</p>
<p>PhantomJS is based on webkit so it cannot determine if the page is OK in other browsers.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Some-Resources&quot;&gt;&lt;a href=&quot;#Some-Resources&quot; class=&quot;headerlink&quot; title=&quot;Some Resources&quot;&gt;&lt;/a&gt;Some Resources&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://
    
    </summary>
    
      <category term="Testing" scheme="http://kajlund.net/categories/Testing/"/>
    
    
      <category term="tdd" scheme="http://kajlund.net/tags/tdd/"/>
    
      <category term="qunint" scheme="http://kajlund.net/tags/qunint/"/>
    
  </entry>
  
  <entry>
    <title>Gulp intro</title>
    <link href="http://kajlund.net/2014/05/10/gulp-intro/"/>
    <id>http://kajlund.net/2014/05/10/gulp-intro/</id>
    <published>2014-05-10T15:25:30.000Z</published>
    <updated>2017-06-11T13:03:26.173Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a> is a task runner that can be used as an alternative to <em>Grunt</em>. Whereas Grunt is more declarative, Gulp might feel more natural to a Node.js programmer. It is a nodejs module that can help you automate and enhance your workflow in the areas of development, testing and Continuous Integration. Grunt is configuration over code and file based. Gulp is code over configuration, stream/memory-based, and it’s easier to use your own nodejs code directly.</p>
<p>With Gulp you can automate things like:</p>
<ul>
<li>Lint sorce code (eslint, jshint, jscs…)</li>
<li>Run unit tests</li>
<li>Source Transpiling, Concatenation and Minification. Own or 3rd party</li>
<li>Build distributables by minifying css/js</li>
<li>CSS compilation like LESS to CSS including vendor prefix handling</li>
<li>Copy/move files.</li>
<li>Inject html files</li>
<li>Angular Template Cache, ngAnnotate</li>
<li>Bump package versions for npm and bower</li>
<li>File revisions and versioning, Cache Busting</li>
<li>Push git tags</li>
<li>Watch your source to automatically trigger tasks when anything changes</li>
<li>etc etc</li>
</ul>
<p>By default, Gulp tasks run asynchronously.</p>
<blockquote>
<p>Using gulp you can ensure code quality, automatically run tests and have an automated build pipeline. Develop - Analyze - Test - Build - Deploy</p>
</blockquote>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Like with Grunt you need to install Gulp globally once, and also locally in each project folder:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div><div class="line">npm install gulp --save-dev</div></pre></td></tr></table></figure>
<p>The second command will add Gulp to the <code>node_modules</code> folder in your project directory and also add an entry in <code>package.json</code> in the <code>devDependencies</code> object.</p>
<h2 id="The-Gulpfile"><a href="#The-Gulpfile" class="headerlink" title="The Gulpfile"></a>The Gulpfile</h2><p>You add a file in the project directory called <code>gulpfile.js</code>. This is where you instruct Gulp what to do. The so called <strong>default</strong> task is the task that will be run if you run Gulp without parameters. To actually do much you need to install a plugin for the task at hand.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Running-Gulp"><a href="#Running-Gulp" class="headerlink" title="Running Gulp"></a>Running Gulp</h2><p>From the command line either just type <code>Gulp</code> to run the default task or add a task name as a parameter to run a specific task.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gulp       #runs the task named default</div><div class="line">gulp build #runs the task named build</div></pre></td></tr></table></figure>
<h2 id="The-Gulp-API"><a href="#The-Gulp-API" class="headerlink" title="The Gulp API"></a>The Gulp API</h2><p>Gulp uses node streams for gathering a source set of files as input and then pipe the input stream through a pipeline of different processes/functions and finally save the altered files to a destination.</p>
<p>Only 4 APIs:</p>
<ul>
<li>gulp.task</li>
<li>gulp.src</li>
<li>gulp.dest</li>
<li>gulp.watch</li>
</ul>
<h3 id="gulp-task-name-dep-fn"><a href="#gulp-task-name-dep-fn" class="headerlink" title="gulp.task(name, [,dep], fn)"></a>gulp.task(name, [,dep], fn)</h3><p>For defining a new task. Common task types are testing and linting code, optimizing files and running a server. Dependencies run <strong>in parallel before</strong> the task is run. The function always returns the stream.</p>
<h3 id="gulp-src-glob-options"><a href="#gulp-src-glob-options" class="headerlink" title="gulp.src(glob [, options])"></a>gulp.src(glob [, options])</h3><p>For reading in the files to work with. Takes a file system glob (set of files).<br>Emits files that match. Any file you need to operate on need to be included in the src stream.<br>Optionally specify options to apply to the glob. Options.base defines how much of the path to retain.</p>
<h3 id="gulp-dest-folder-options"><a href="#gulp-dest-folder-options" class="headerlink" title="gulp.dest(folder [,options])"></a>gulp.dest(folder [,options])</h3><p>You use <code>gulp.dest</code> when you want to write files from the input stream back to disk. You can write back to the same files or to new files.</p>
<h3 id="gulp-watch-glob-options-tasks-cb"><a href="#gulp-watch-glob-options-tasks-cb" class="headerlink" title="gulp.watch(glob [, options], tasks|cb)"></a>gulp.watch(glob [, options], tasks|cb)</h3><p>To watch a set of files. Can be useful for restarting a server, running tests, doing code linting or comiling CSS.</p>
<p>Watch files in glob pattern for any changes and call upon defined task(s) or alternatively call a callback function.</p>
<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><ul>
<li>Install gulp as a global package for convenience <code>npm install -g gulp</code>.</li>
<li>Install gulp locally in your project <code>npm install --save-dev gulp</code></li>
<li>Install other dependent packages</li>
<li>Code your tasks</li>
<li>Run your tasks</li>
</ul>
<p>We want to save the dependencies to the <code>devDependencies</code> section in <code>package.json</code>.</p>
<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>Plugins are node gulp packages containing functionality ready to be used by gulp tasks. We’re not limited to just using plugins though. We can also write our own node functions and call them from our gulp tasks.</p>
<p>To reduce the long list of required plugins you can also load them as you need them using a plugin called <a href="https://github.com/jackfranklin/gulp-load-plugins" target="_blank" rel="external">gulp-load-plugins</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    plug = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)(&#123;<span class="attr">lazy</span>: <span class="literal">true</span>&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'vet'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp</div><div class="line">        .src(<span class="string">'app/**/*.js'</span>)</div><div class="line">        .pipe(plug.if(args.verbose, plug.print()))</div><div class="line">        .pipe(plug.jscs())</div><div class="line">        .pipe(plug.jshint())</div><div class="line">        .pipe(plug.jshint.reporter(<span class="string">'jshint-stylish'</span>, &#123;<span class="attr">verbose</span>: <span class="literal">true</span>&#125;))</div><div class="line">        .pipe(plug.jshint.reporter(<span class="string">'fail'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h2><p>When not returning a stream from a function use callbacks to end the stream:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'styles'</span>, [<span class="string">'clean-styles'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    log(<span class="string">'Compiling LESS --&gt; CSS'</span>);</div><div class="line">...</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean-styles'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> files = config.temp + <span class="string">'**/*.css'</span>;</div><div class="line">    clean(files, done);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">path, done</span>) </span>&#123;</div><div class="line">    log(<span class="string">'Cleaning: '</span> + plug.util.colors.blue(path));</div><div class="line">    del(path, done);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Gulp-Watch"><a href="#Gulp-Watch" class="headerlink" title="Gulp Watch"></a>Gulp Watch</h2><p>The watch function is used to monitor file changes and trigger tasks as changes occur.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'less-watcher'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch([config.lessFiles], [<span class="string">'styles'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Handling-Errors"><a href="#Handling-Errors" class="headerlink" title="Handling Errors"></a>Handling Errors</h2><p>All compilation can of course fail because of syntax errors. To gracefully handle errors in a watch pipeline you can either handle an on error event or use something like gulp-plumber which will print a nice error message and end the watch. <code>npm install --save-dev gulp-plumber</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'styles'</span>, [<span class="string">'clean-styles'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    log(<span class="string">'Compiling LESS --&gt; CSS'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp</div><div class="line">        .src(conf.lessFiles)</div><div class="line">        .pipe(plug.plumber())</div><div class="line">        .pipe(plug.less())</div><div class="line">        <span class="comment">//.on('error', errorLogger)</span></div><div class="line">        .pipe(plug.autoprefixer(&#123;<span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 5%'</span>] &#125;))</div><div class="line">        .pipe(gulp.dest(conf.tempFolder));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorLogger</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    log(<span class="string">'*** Start of Error ***'</span>);</div><div class="line">    log(error);</div><div class="line">    log(<span class="string">'*** End of Error'</span>);</div><div class="line">    <span class="keyword">this</span>.emit(<span class="string">'end'</span>); <span class="comment">//end the pipe</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Some-Resources"><a href="#Some-Resources" class="headerlink" title="Some Resources"></a>Some Resources</h2><ul>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">Gulp homepage</a></li>
<li><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">Gulp Github page</a></li>
<li><a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes" target="_blank" rel="external">Gulp Recipes</a></li>
<li><a href="http://gulpjs.com/plugins/" target="_blank" rel="external">Gulp Plugins</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md" target="_blank" rel="external">Getting Started</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">API Documentation</a></li>
<li><a href="https://laracasts.com/lessons/gulp-this" target="_blank" rel="external">Laracasts video tutorial</a></li>
<li><a href="https://ponyfoo.com/articles/my-first-gulp-adventure" target="_blank" rel="external">Pony Foo Blog Post</a></li>
<li>JavaScript Build Automation @ PluralSight - <a href="https://github.com/johnpapa/pluralsight-gulp" target="_blank" rel="external">Github repo</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt; is a task runner that can be used as an alternative to &lt;em&gt;Grunt&lt;/em
    
    </summary>
    
      <category term="Automation" scheme="http://kajlund.net/categories/Automation/"/>
    
    
      <category term="gulp" scheme="http://kajlund.net/tags/gulp/"/>
    
      <category term="automation" scheme="http://kajlund.net/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>Bower</title>
    <link href="http://kajlund.net/2014/05/03/bower/"/>
    <id>http://kajlund.net/2014/05/03/bower/</id>
    <published>2014-05-03T15:25:30.000Z</published>
    <updated>2017-06-11T13:04:50.754Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bower.io/" target="_blank" rel="external">Bower</a> is a package manager (node module) for installing client-side JavaScript dependencies. Bower makes it easy to install and manage the libraries you need to use in a project.</p>
<p>I prefer to have it installed as a global node package. You can check if you have it installed globally by running <code>npm list --global</code>. If you need to install it run <code>npm install bower -g</code>.</p>
<p>In the root of your project folder add a file called <code>.bowerrc</code>. This is for telling bower where to install libraries.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;directory&quot;: &quot;public/vendor&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Save the file and then run <code>bower init</code> from the command line in the project root directory. Same as with npm init you can just accept the defaults. Bower creates <code>bower.json</code> that should be similar to:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"MyApp"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"authors"</span>: [</div><div class="line">    <span class="string">"kajlund &lt;kaj@rannikkohurri.net&gt;"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"description"</span>: <span class="string">"My awesome app"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"ignore"</span>: [</div><div class="line">    <span class="string">"**/.*"</span>,</div><div class="line">    <span class="string">"node_modules"</span>,</div><div class="line">    <span class="string">"bower_components"</span>,</div><div class="line">    <span class="string">"vendor"</span>,</div><div class="line">    <span class="string">"test"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>After this you can install your client-side dependencies using the bower command that is similar to using npm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bower install angular angular-resource angular-route --save</div><div class="line">bower install bootstrap --save</div></pre></td></tr></table></figure>
<p>After installing a library there will be an entry added in <code>bower.json</code> if you provided the <code>--save</code> option.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"angular"</span>: <span class="string">"~1.2.14"</span>,</div><div class="line">    <span class="string">"angular-route"</span>: <span class="string">"~1.2.14"</span>,</div><div class="line">    <span class="string">"angular-cookies"</span>: <span class="string">"~1.2.14"</span>,</div><div class="line">    <span class="string">"angular-touch"</span>: <span class="string">"~1.2.14"</span>,</div><div class="line">    <span class="string">"jquery"</span>: <span class="string">"~1.10.2"</span>,</div><div class="line">    <span class="string">"bootstrap"</span>: <span class="string">"~3.1.1"</span>,</div><div class="line">    <span class="string">"toastr"</span>: <span class="string">"~2.0.1"</span>,</div><div class="line">    <span class="string">"spinjs"</span>: <span class="string">"~1.3.3"</span>,</div><div class="line">    <span class="string">"font-awesome"</span>: <span class="string">"~4.0.3"</span>,</div><div class="line">    <span class="string">"angular-bootstrap"</span>: <span class="string">"~0.10.0"</span>,</div><div class="line">    <span class="string">"parse-js-sdk"</span>: <span class="string">"~1.2.16"</span>,</div><div class="line">    <span class="string">"angular-marked"</span>: <span class="string">"Hypercubed/angular-marked#~0.0.5"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://bower.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bower&lt;/a&gt; is a package manager (node module) for installing client-side JavaSc
    
    </summary>
    
      <category term="Package Managers" scheme="http://kajlund.net/categories/Package-Managers/"/>
    
    
      <category term="bower" scheme="http://kajlund.net/tags/bower/"/>
    
      <category term="tools" scheme="http://kajlund.net/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>The Mobile Web</title>
    <link href="http://kajlund.net/2014/03/15/the-mobile-web/"/>
    <id>http://kajlund.net/2014/03/15/the-mobile-web/</id>
    <published>2014-03-15T16:25:30.000Z</published>
    <updated>2017-06-11T12:53:17.778Z</updated>
    
    <content type="html"><![CDATA[<p>The Mobile Web refers to browser-based applications created for mobile devices, like smartphones and tablets, wirelessly connected to the internet.</p>
<p>Think of the mobile web as a usage scenario instead of just a form factor. Using an application in a totally different environment than the typical desktop application is used in changes the way users access and consume websites.</p>
<p>Mobile device characteristics are important but there’s more to it than just screen size.</p>
<h3 id="Mobile-compared-to-desktop-platforms"><a href="#Mobile-compared-to-desktop-platforms" class="headerlink" title="Mobile compared to desktop platforms:"></a>Mobile compared to desktop platforms:</h3><ul>
<li><p>Lots of different browsers with varying support for modern web technologies</p>
</li>
<li><p>Have less available resources than desktop machines, both hardware and network bandwidth</p>
</li>
<li><p>Form factor. Screens are smaller, interactions and expectations are different.</p>
</li>
<li><p>Might not have good keyboards and pointing devices</p>
</li>
<li><p>Typically used in an unpredictable environment instead of a fixed location</p>
</li>
<li><p>Mobile devices have features unavailable on a desktop computer like GPS, accelerometer, camera etc.</p>
</li>
</ul>
<h3 id="Things-to-consider"><a href="#Things-to-consider" class="headerlink" title="Things to consider:"></a>Things to consider:</h3><ul>
<li><p>What kinds personas do you want to target? Knowing this helps you identify desirable features.</p>
</li>
<li><p>What do these personas want to do on the site?</p>
</li>
<li><p>Where, when and why is the site being accessed?</p>
</li>
</ul>
<h3 id="Why-do-we-need-mobile-sites-WebApps-now"><a href="#Why-do-we-need-mobile-sites-WebApps-now" class="headerlink" title="Why do we need mobile sites/WebApps now?"></a>Why do we need mobile sites/WebApps now?</h3><ul>
<li>Mobile web usage will exceed desktop web usage in the near future</li>
<li>The web is the only true cross-platform technology.</li>
<li>Web technology is alone in reaching pretty much every available platform</li>
<li>I.e. the web is the future platform.</li>
<li>Modern devices pretty much all have browsers with desktop-like capabilities</li>
</ul>
<h2 id="Defining-some-commonly-used-terminology"><a href="#Defining-some-commonly-used-terminology" class="headerlink" title="Defining some commonly used terminology"></a>Defining some commonly used terminology</h2><h3 id="Web-Apps"><a href="#Web-Apps" class="headerlink" title="Web Apps?"></a>Web Apps?</h3><p>There is no clear definition of what a web app really is, but it usually involves a program running in a web browser window with interactivity and similar characteristics that are well suited for technologies commonly referred to as HTML5.</p>
<p>Apps have an emphasis on interactivity and accomplishing tasks, as opposed to serving content. Also, apps have layouts that fits single screens and actions that don’t need to rebuild the whole UI.</p>
<h3 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML 5"></a>HTML 5</h3><p>By saying HTML5, people can mean a number of things but usually it is the combination of the evolving HTML5 and CSS3 standards plus JavaScript and the likewise evolving standards for device APIs (geolocation, offline storage etc).</p>
<p>The above standards are the core pieces for building modern, interactive web applications.</p>
<h3 id="Responsive-Web-Design-RWD"><a href="#Responsive-Web-Design-RWD" class="headerlink" title="Responsive Web Design (RWD)"></a>Responsive Web Design (RWD)</h3><p>A set of techniques used to make a web site adapt its layout according to the user’s browser window. This is usually done by switching the style sheets depending on consumer.</p>
<p>A responsive web design, built with HTML5 and CSS3, allows a website to work across multiple devices and screens.</p>
<p>RWD is perhaps the simplest and quickest ways to make a website built for desktop work on a lot of devices using the skills you already have.</p>
<h2 id="Application-Categories"><a href="#Application-Categories" class="headerlink" title="Application Categories"></a>Application Categories</h2><p>Three Categories:</p>
<ul>
<li>Native Applications</li>
<li>Web Apps/Sites</li>
<li>Hybrids that are built with web technology and can be packaged for native distribution. I call these WebApps.</li>
</ul>
<h2 id="Native-Applications"><a href="#Native-Applications" class="headerlink" title="Native Applications"></a>Native Applications</h2><p>Applications built using the provided SDK for the designated platform. A subcategory of native applications is the Cross-Platform Native Frameworks (CPNF) that aim to use a single codebase and generate native code for multiple platforms.</p>
<ul>
<li>Not cross-platform</li>
<li>Need to create separate apps for every targeted platform will be expensive</li>
<li>Huge learning curve for new platforms</li>
<li>Fast changing landscape could make your selected platform irrelevant in a few years.</li>
<li>Not linkable</li>
<li>Discoverable via App Stores</li>
<li>Can use all device APIs. App can do anything the device is capable of</li>
<li>Apps are faster and gets the right look and feel</li>
</ul>
<p>For the CPNF’s most of the cons listed goes away while the pros should mostly apply.</p>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li>iOS - Xcode</li>
<li>Android - Android SDK + Eclipse</li>
<li>Windows - Visual Studio (C# + XAML)</li>
<li>iOS + Android → Appcelerator Studio (JavaScript/CoffeeScript)</li>
<li>Most clients → RhoMobile Suite (Ruby/Html)</li>
</ul>
<blockquote>
<p>By building native apps you’ll be able to build a very responsive app with access to all device APIs and the proper look &amp; feel. This is also usually the by far most expensive and risky option. Can be the best option for complex client-side logic.</p>
</blockquote>
<h2 id="Web-Apps-Sites"><a href="#Web-Apps-Sites" class="headerlink" title="Web Apps/Sites"></a>Web Apps/Sites</h2><p>You can either build a single adaptable site using <a href="http://www.alistapart.com/articles/responsive-web-design/" target="_blank" rel="external">responsive web design</a> techniques or build separate<br>sites for mobile devices.</p>
<p>The web site strategy would mainly be suitable for a traditional site serving content and not so much when you need to build something that can take advantage of mobile device functionality.</p>
<ul>
<li>Cross-platform</li>
<li>Traditionally building a separate mobile site but using responsive web design (RWD) techniques we can target different device sizes with CSS.</li>
<li>Linkable</li>
<li>Not discoverable via App Stores</li>
<li>Limited access to device APIs. More coming through evolving Web standards.</li>
<li>No presence in app stores (for monetizing go native)</li>
<li>No access to some native APIs/functionality</li>
</ul>
<h3 id="Tools-1"><a href="#Tools-1" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li>HTML, CSS + JavaScript</li>
<li>Libraries like jQuery etc.</li>
<li>Frameworks like ExtJS, Ember.js (SproutCore) etc.</li>
</ul>
<blockquote>
<p>Well suited for providing traditional site content to the largest possible audience. Less well suited for applications targeted to specific audiences.</p>
</blockquote>
<h2 id="Web-Apps-1"><a href="#Web-Apps-1" class="headerlink" title="Web Apps"></a>Web Apps</h2><ul>
<li>Native-like look &amp; feel, but not quite and not as fast</li>
<li>Cross-platform in general</li>
<li>Linkable</li>
<li>Discoverable via App Stores</li>
<li>Can use most device APIs</li>
</ul>
<h3 id="Tools-2"><a href="#Tools-2" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li>Same tools as for building Web Sites +</li>
<li>Native container and native API provider like PhoneGap (Apache Cordova)</li>
</ul>
<blockquote>
<p>Well suited for getting native-like functionality across platforms. Should often be the most suitable alternative as long as the client isn’t too complex. Lot’s of apps currently across App Stores are built like this.</p>
</blockquote>
<p>You can use a full-stack framework like Sencha Touch or a “Glue framework” by picking together parts from smaller libraries and frameworks like jQuery Mobile.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Mobile Web refers to browser-based applications created for mobile devices, like smartphones and tablets, wirelessly connected to the
    
    </summary>
    
      <category term="Architecture" scheme="http://kajlund.net/categories/Architecture/"/>
    
    
      <category term="architecture" scheme="http://kajlund.net/tags/architecture/"/>
    
      <category term="javascript" scheme="http://kajlund.net/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Rhomobile</title>
    <link href="http://kajlund.net/2014/02/14/rhomobile/"/>
    <id>http://kajlund.net/2014/02/14/rhomobile/</id>
    <published>2014-02-14T16:25:30.000Z</published>
    <updated>2017-06-11T12:54:03.580Z</updated>
    
    <content type="html"><![CDATA[<p>We recently had a need for building a simple WebApp that must be made available on the Motorola MC65 device. When I did the usual Google search I stumbled upon the <a href="https://www.zebra.com/us/en/products/software/mobile-computers/rhomobile-suite.html" target="_blank" rel="external">RhoMobile</a> framework.</p>
<p>I’ve heard about it before but haven’t paid much attention as it looks very “enterprisy” and not very “open source”, which is what I’d often prefer these days.</p>
<p>This time, because we had this old Motorola device requirement, I decided to take a closer look and started reading a book called <strong>RhoMobile Beginner’s Guide</strong> by Abhishek Nalwaya (Packt Publishing 2011).</p>
<p>What follows is a short summary of what RhoMobile Suite contains:</p>
<h2 id="Rhomobile-Suite"><a href="#Rhomobile-Suite" class="headerlink" title="Rhomobile Suite"></a>Rhomobile Suite</h2><p>RhoMobile offers an open source, Ruby-based mobile development framework for business mobility solutions through four major products:</p>
<ul>
<li>Rhodes</li>
<li>RhoSync</li>
<li>RhoHub</li>
<li>RhoGallery</li>
</ul>
<h2 id="Rhodes"><a href="#Rhodes" class="headerlink" title="Rhodes"></a>Rhodes</h2><ul>
<li>Open Source framework for building device independent native clients using Ruby</li>
<li>Supports iOS, Windows Mobile, Windows Phone, Google Android, and BlackBerry</li>
<li>Can handle device APIs like GPS, Contacts, Calendar, Camera, Maps, Push, Barcode, Signatures and Bluetooth</li>
<li>Is opinionated, MVC based and contains an ORM called Rhom</li>
<li>Uses HTML templating for view generation</li>
</ul>
<h2 id="RhoSync"><a href="#RhoSync" class="headerlink" title="RhoSync"></a>RhoSync</h2><ul>
<li>Sync Server that can push changes using native phone SDK and monitor clients</li>
<li>Is highly scalable - Uses Redis key/value store for data caching</li>
</ul>
<h2 id="RhoHub"><a href="#RhoHub" class="headerlink" title="RhoHub"></a>RhoHub</h2><ul>
<li>Cloud deployment on Heroku</li>
<li>Hosted development environment for Rhodes and RhoSync</li>
<li>One-click builds</li>
<li>Version control with Git and Collaborator Management</li>
</ul>
<h2 id="RhoGallery"><a href="#RhoGallery" class="headerlink" title="RhoGallery"></a>RhoGallery</h2><ul>
<li>Administrators can manage application exposure to end users</li>
<li>Can provide central launching place for apps to different users</li>
<li>Management console for “app galleries” on RhoHub</li>
<li>Automatic provisioning of appropriate apps for end users. Handles invites and provides downloads for app installation</li>
</ul>
<h2 id="Why-Rhomobile"><a href="#Why-Rhomobile" class="headerlink" title="Why Rhomobile?"></a>Why Rhomobile?</h2><ul>
<li>Model View Controller: Similar to Rails produces code that is well structured and easy to understand and thus maintain.</li>
<li>The same codebase supports most devices and even desktop support is coming soon.</li>
<li>Good offline capabilities with good synch options via RhoSync.</li>
<li>DB independent Active Record-like ORM called Rhom</li>
<li>Productive via constraints on structure and organization and also code generators and scaffolding</li>
<li>Highly scalable sync server</li>
<li>Hosted builds via RhoHub</li>
</ul>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>The application can consist of 3 separate layers:</p>
<ul>
<li>Rhodes Client Application<ul>
<li>Ruby executor with ORM and MVC layers and device APIs</li>
<li>A RhoSync Client if need access to server data</li>
</ul>
</li>
<li>RhoSync Server<ul>
<li>Source Adapters</li>
</ul>
</li>
<li>Backend Application<ul>
<li>REST, SOAP etc</li>
</ul>
</li>
</ul>
<h2 id="Licensing"><a href="#Licensing" class="headerlink" title="Licensing"></a>Licensing</h2><p>Rhodes is free and Open Source. RhoSync is only free for Open Source projects. Support is available for Rhodes Enterprice or Rhodes Commercial Licenses.</p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>Browsing the Motorola website I noted that they have renamed the parts that make up the RhoMobile suite. They now have RhoElements, RhoConnect and RhoStudio. RhoStudio gives you a nice Eclipse-based IDE and emulators for testing what you build. The latest version seems to support building desktop clients too.</p>
<p>All in all the RhoMobile suite seems to be a very complete solution for building client UIs that you should either embrace totally or ignore totally. I’m sure there’s a bit of a learning curve to master all the pieces in this suite. On the other hand, if you embrace it I can imagine it could take care of most UI scenarios you could dream up from a single code base.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We recently had a need for building a simple WebApp that must be made available on the Motorola MC65 device. When I did the usual Google 
    
    </summary>
    
      <category term="Frameworks" scheme="http://kajlund.net/categories/Frameworks/"/>
    
    
      <category term="frameworks" scheme="http://kajlund.net/tags/frameworks/"/>
    
      <category term="mobile" scheme="http://kajlund.net/tags/mobile/"/>
    
      <category term="rhomobile" scheme="http://kajlund.net/tags/rhomobile/"/>
    
  </entry>
  
  <entry>
    <title>Large Scale JavaScript Development</title>
    <link href="http://kajlund.net/2014/02/08/large-scale-javascript/"/>
    <id>http://kajlund.net/2014/02/08/large-scale-javascript/</id>
    <published>2014-02-08T16:25:30.000Z</published>
    <updated>2017-06-11T13:00:30.599Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>I watched a really interesting course by Shawn Wildermuth on <a href="http://www.pluralsight.com/training/Courses/TableOfContents/large-scale-javascript" target="_blank" rel="external">Pluralsight</a> recently and learned a thing or two about writing large scale JavaScript applications.</p>
</blockquote>
<p>The material is very useful when applied to large applications, but can of course benefit small projects as well.</p>
<h2 id="What-is-large-Scale-JavaScript"><a href="#What-is-large-Scale-JavaScript" class="headerlink" title="What is large Scale JavaScript?"></a>What is large Scale JavaScript?</h2><p>How to determine what is large (subjective)</p>
<ul>
<li>More than 10 000 lines of code</li>
<li>More than 12 members in a team</li>
<li>Complex application (many modules and/or areas of functionality)</li>
</ul>
<h3 id="What’s-Wrong-with-JavaScript"><a href="#What’s-Wrong-with-JavaScript" class="headerlink" title="What’s Wrong with JavaScript?"></a>What’s Wrong with JavaScript?</h3><ul>
<li>JavaScript wasn’t designed for scale (modularity, composition classes…)</li>
<li>Among the key flawds are lack of packaging, too easy to pollute the global namespace, prototypical inheritance and immature tooling.</li>
<li>Easily end up with big files containing a mix of business logic and UI logic using libraries like jQuery.</li>
<li>Nested asynchronous calls can lead to what is known as callback-hell</li>
</ul>
<blockquote>
<p>These flawds often lead to code that is hard to read and maintain.</p>
</blockquote>
<h3 id="Frameworks-and-Libraries"><a href="#Frameworks-and-Libraries" class="headerlink" title="Frameworks and Libraries"></a>Frameworks and Libraries</h3><ul>
<li>A library is a toolbox for a specific purpose. It doesn’t imply structure</li>
<li>A framework contains a set of libraries/tools for a specific purpose. They do imply structure.</li>
<li>Popular frameworks are AngularJS, Ember, Durandal, Knockout, Backbone</li>
</ul>
<blockquote>
<p>Scalable JavaScript is not a product of a framework but frameworks can make it simpler to build large scale apps.</p>
</blockquote>
<h3 id="What’s-the-Solution"><a href="#What’s-the-Solution" class="headerlink" title="What’s the Solution?"></a>What’s the Solution?</h3><p><strong>The key is to have a codebase that is</strong>:</p>
<ul>
<li>Maintainable - Modularized, Separation of concerns,</li>
<li>Scalable - Compozeable, loosely coupled</li>
<li>Testable - Encapsulate, test facades</li>
</ul>
<blockquote>
<p>SPAs do not solve these problems but can make them worse. Apps should include as many pages as necessary. <em>Rich JavaScript applications</em> would be a better name.</p>
</blockquote>
<p>SPAs have brought some goodness:</p>
<ul>
<li>Encourages loose coupling</li>
<li>uses MV*</li>
<li>Tend to have long lived pages</li>
<li>Focuses on data binding + REST</li>
</ul>
<blockquote>
<p>Good development practices can solve many of the problems with the JavaScript language</p>
</blockquote>
<h3 id="Meta-Languages"><a href="#Meta-Languages" class="headerlink" title="Meta Languages"></a>Meta Languages</h3><ul>
<li>ES6 - will add modules, classes and inheritance</li>
<li>CoffeeScript, requires learning Rubyesque syntax</li>
<li>TypeScript, requires mostly learning ES6 syntax, type safety</li>
<li>Dart, requires mostly learning ES6 syntax, type safety</li>
</ul>
<blockquote>
<p>Using a meta language can help but will need to be backed by good development practices to solve our problems building large scale apps.</p>
</blockquote>
<h2 id="Maintainable-JavaScript"><a href="#Maintainable-JavaScript" class="headerlink" title="Maintainable JavaScript"></a>Maintainable JavaScript</h2><ul>
<li>Avoid the global scope so you don’t have to worry about name collisions</li>
<li>Use strict mode to help find mistakes early</li>
<li>Increase stability by structuring your code into separate modules</li>
<li>Manage dependencies by using the dependency injection pattern</li>
<li>Abandon nested callbacks in favor of promises and async patterns</li>
<li>Use eventing and messaging for loose coupling of modules</li>
</ul>
<h3 id="Application-Frameworks"><a href="#Application-Frameworks" class="headerlink" title="Application Frameworks"></a>Application Frameworks</h3><ul>
<li>Techniques for writing maintaiable code works with most frameworks</li>
<li>Frameworks may encourage you to write more maintainable codebases, but it’s ultimately up to the developers to do the right thing</li>
</ul>
<h3 id="Avoid-Polluting-the-Global-Scope"><a href="#Avoid-Polluting-the-Global-Scope" class="headerlink" title="Avoid Polluting the Global Scope"></a>Avoid Polluting the Global Scope</h3><ul>
<li>Easy to pollute - Too easy to create global vars in JavaScript</li>
<li>Collision - Risk of overwriting existing vars</li>
<li>Monolithic - Encourages large blocks of code instead of smaller pieces of structured code</li>
</ul>
<blockquote>
<p>In JS there is no block scope. Instead we must use function scope to avoid global objects.</p>
</blockquote>
<ul>
<li><strong>Self-Executing Anonymous Functions</strong> (SEAF)</li>
<li>Also called <strong>Self-Invoking Anonymous Functions</strong> (SIAF)</li>
<li>And <strong>Immediately Invoked Function Expressions</strong> (IIFE)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Your Code Here</span></div><div class="line">    <span class="keyword">var</span> a = &#123;&#125;; <span class="comment">// The a object is only global inside the function</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>Enclosing a function inside parenteses creates a function object. The last two parenteses tells the parser to execute the function object. Any variable declared inside this function will not leak to the global scope. You can pass parameters between the last two parenteses to prevent global object lookup.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">// Your Code Here</span></div><div class="line">    $.each(...)</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<h3 id="Strictness-in-JavaScript"><a href="#Strictness-in-JavaScript" class="headerlink" title="Strictness in JavaScript"></a>Strictness in JavaScript</h3><p>Using strict mode improves code quality by providing early detection of problematic code.</p>
<ul>
<li>Prohibits automatic var declaration on first use</li>
<li>Enforces type</li>
<li>Enforces implemented read/write access to objects</li>
</ul>
<p>In strict mode exceptions are raised when these bad practices are used in code. Using strict mode is not a replacement for JSLint.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    x = <span class="number">0</span>; <span class="comment">// works</span></div><div class="line">    <span class="keyword">var</span> y = <span class="string">""</span>;</div><div class="line">    y = <span class="number">123</span>;    <span class="comment">// works too</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line"></div><div class="line">    x = <span class="number">0</span>;      <span class="comment">// raises exception</span></div><div class="line">    <span class="keyword">var</span> y = <span class="string">""</span>;</div><div class="line">    y = <span class="number">123</span>;    <span class="comment">// raises exception</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="Modular-JavaScript"><a href="#Modular-JavaScript" class="headerlink" title="Modular JavaScript"></a>Modular JavaScript</h3><p>Small discrete units of work pieced together to make code base more maintainable</p>
<blockquote>
<p>each of a set of standardized parts or independent units that can be used to construct a more complex structure</p>
</blockquote>
<ul>
<li>A module is a single unit of work horizontal (login) or vertical (logging).</li>
<li>Small, reusable and individually testable</li>
<li>Loosly coupled</li>
<li>Discrete</li>
</ul>
<p>Rules for Modules:</p>
<ul>
<li>No DOM manipulation outside a module</li>
<li>No global declarations</li>
<li>No Hard coupling to other modules</li>
<li>No accessing of Global/Native objects (pass them in)</li>
</ul>
<h4 id="The-Module-Pattern"><a href="#The-Module-Pattern" class="headerlink" title="The Module Pattern"></a>The Module Pattern</h4><p>Returns a Singleton representing the module.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> destinationsModule = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> _cache = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fillCache</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">fillCache</span>: _fillCache,</div><div class="line">        <span class="attr">cache</span>: _cache</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h4 id="The-JavaScript-Class-Pattern"><a href="#The-JavaScript-Class-Pattern" class="headerlink" title="The JavaScript Class Pattern"></a>The JavaScript Class Pattern</h4><p>Useful when you need multiple instances of objects.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.cache = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Animal.prototype.walk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Framework</th>
<th>Types of Modularity</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript</td>
<td>Namespaces, Module Pattern, Class Pattern</td>
</tr>
<tr>
<td>AngularJS</td>
<td>Modules, Services, Factories, Controllers, Directives</td>
</tr>
<tr>
<td>Backbone</td>
<td>Namespaces and Objects. More with extensions</td>
</tr>
<tr>
<td>EmberJS</td>
<td>Extend built-in objects or use ES6</td>
</tr>
<tr>
<td>Durandal</td>
<td>Asynchronous Module Definition</td>
</tr>
<tr>
<td>EcmaScript 6</td>
<td><a href="http://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="external">CommonJS</a> Compatible</td>
</tr>
</tbody>
</table>
<h3 id="Dependency-Management"><a href="#Dependency-Management" class="headerlink" title="Dependency Management"></a>Dependency Management</h3><blockquote>
<p>The degree to which each program module relies on each one of the other modules</p>
</blockquote>
<p>A system for handling dependencies across an application. Using the <a href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="external">dependency injection pattern</a> (a.k.a. inversion of control) is typical.</p>
<p>Allows passing dependencies without relying on global scope. Cascading dependencies are handled automatically</p>
<ul>
<li>RequireJS (e.g. AMD)</li>
<li>CommonJS</li>
<li>AngularJS</li>
</ul>
<h4 id="Asynchronous-Module-Definition-AMD"><a href="#Asynchronous-Module-Definition-AMD" class="headerlink" title="Asynchronous Module Definition (AMD)"></a>Asynchronous Module Definition (AMD)</h4><p>Making a Module</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// someModule.js - default module name is file name if no name provided</span></div><div class="line"><span class="comment">// The array param is for dependencies required for this module</span></div><div class="line">define(<span class="string">"myModule"</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_init</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: _init</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Using a Module</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"myModule"</span>, <span class="string">"jQuery"</span>],</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">myModule, $</span>) </span>&#123;</div><div class="line">        <span class="comment">//use the dependencies</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h4 id="CommonJS-Spec"><a href="#CommonJS-Spec" class="headerlink" title="CommonJS Spec"></a>CommonJS Spec</h4><p>The module must use the exports function to export the facade of the module.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exports.getMeSomething = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The code using the module requires the exported facade by assigning it to a variable that can then be used.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> my = <span class="built_in">require</span>(<span class="string">'./myModule'</span>);</div><div class="line">my.getMeSomething();</div></pre></td></tr></table></figure>
<p>AngularJS Sample</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">"myModule"</span>, []);</div><div class="line"></div><div class="line">myModule.factory(<span class="string">"dataFactory"</span>, [],</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> _myData = &#123;&#125;;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">myData</span>: _myData</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">myModule.controller(<span class="string">"controller"</span>, [<span class="string">"dataFactory"</span>],</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">dataFactory</span>) </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="Smart-Asynchrony"><a href="#Smart-Asynchrony" class="headerlink" title="Smart Asynchrony"></a>Smart Asynchrony</h3><ul>
<li>Deeply nested callbacks become hard to maintain</li>
<li>The two patterns commonly used to deal with this is <em>promises</em> and <em>async libraries</em></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.get(<span class="string">"/api/destinations"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (result.success) &#123;</div><div class="line">            <span class="keyword">if</span> ($(<span class="string">"#userName"</span>).length &gt; <span class="number">0</span>) &#123;</div><div class="line">                $.get(<span class="string">"/api/user/"</span> + userId, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (result.success) &#123;</div><div class="line">                        ...</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"Failed to get destinations"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// using Q.js</span></div><div class="line">someModule.makeAsyncCall()</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)     <span class="comment">// runs first</span></div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)     <span class="comment">// runs second</span></div><div class="line">    .fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)     <span class="comment">//runs if something fails</span></div><div class="line">    .finally(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)  <span class="comment">//runs after either success or fail</span></div><div class="line">    .done();                       <span class="comment">//completes the promises chain</span></div></pre></td></tr></table></figure>
<h4 id="Async-Library"><a href="#Async-Library" class="headerlink" title="Async Library"></a>Async Library</h4><ul>
<li>Used by node.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// using Async</span></div><div class="line"></div><div class="line"><span class="keyword">async</span>.parallel([</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">        ...</div><div class="line">        cb(<span class="number">1</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">        ...</div><div class="line">        cb(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">], <span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// results = [1,2]</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Loose-Coupling"><a href="#Loose-Coupling" class="headerlink" title="Loose Coupling"></a>Loose Coupling</h3><ul>
<li>don’t maintain hard links between modules</li>
<li>Avoid every module requiring references to every other module</li>
<li>Enables testing</li>
<li>The key to loose coupling is messaging by pub/sub or global events</li>
</ul>
<h4 id="jQuery-Events"><a href="#jQuery-Events" class="headerlink" title="jQuery Events"></a>jQuery Events</h4><p>JQuery has a global event object on the jQuery object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Publish event</span></div><div class="line">$.event.trigger(<span class="string">"our.event.name"</span>, [<span class="string">"some"</span>, <span class="string">"Context"</span>]);</div><div class="line"></div><div class="line"><span class="comment">//Subscribe (requires DOM element)</span></div><div class="line">$(<span class="built_in">document</span>).on(<span class="string">"our.event.name"</span>),</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">event, some, context</span>) </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="AmplifyJS"><a href="#AmplifyJS" class="headerlink" title="AmplifyJS"></a>AmplifyJS</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Publish event</span></div><div class="line">amplify.publish(<span class="string">"our.event.name"</span>, <span class="string">"some"</span>, <span class="string">"context"</span>);</div><div class="line"></div><div class="line"><span class="comment">//Subscribe</span></div><div class="line">amplify.subscribe(<span class="string">"our.event.name"</span>),</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">some, cnx</span>) </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Publish event</span></div><div class="line">app.controller(<span class="string">"myCtrl"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$rootScope</span>) </span>&#123;</div><div class="line">     $rootScope.$broadcast(<span class="string">"our.event.name"</span>, <span class="string">"some"</span>, <span class="string">"context"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//Subscribe</span></div><div class="line"></div><div class="line">app.controller(<span class="string">"myCtrl"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">     $scope.$on(<span class="string">"our.event.name"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">some, ctx &#123; ... &#125;</span>)</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Scalable-JavaScript"><a href="#Scalable-JavaScript" class="headerlink" title="Scalable JavaScript"></a>Scalable JavaScript</h2><p>JavaScript code can run on many different types of devices. You want your code to run on both high-end and low-end devices.</p>
<p>JavaScript typically has the following scalability problems:</p>
<ul>
<li>Runtime performance (Desktop/Mobile) - Improve code quality</li>
<li>Parse time - Affects startup time. Optimize code.</li>
<li>Download speeds - Compose your app so that not everything is loaded up front</li>
</ul>
<h3 id="Improve-Code-Quality"><a href="#Improve-Code-Quality" class="headerlink" title="Improve Code Quality"></a>Improve Code Quality</h3><p>Entails writing less code, improving your app architecture and smarter UI coding.</p>
<ul>
<li>Code size impacts performance - Parsing is a bottleneck not linear with code size</li>
<li>Your code is not always cached or JITed</li>
<li>Deferring operations until necessary is important</li>
<li>Users are more inclined to wait as they go that wait up front</li>
<li>Use a smart application architecture where you are able to compose a larger app into loadabled modules via a common facade and underlying framework. Don’t make direct dependencies between modules.</li>
<li>Smarter UI coding entails avoiding pre-drawing hidden UI if possible, do DOM manipulation off DOM (remove, edit, insert).</li>
</ul>
<h3 id="Optimize"><a href="#Optimize" class="headerlink" title="Optimize"></a>Optimize</h3><ul>
<li>Make your source as small as possible by minifying</li>
<li>Automate by creating a build step</li>
<li>Remove debug code sections using conditional compilation</li>
</ul>
<h4 id="Minification"><a href="#Minification" class="headerlink" title="Minification"></a>Minification</h4><blockquote>
<p>The process of removing all unnecessary characters from source code without changing its functionality</p>
</blockquote>
<ul>
<li>To be able to minify your code needs to be planned for it. Relying on function parameter names is a typical problem.</li>
<li>Automate minification with tools like Visual Studio, GruntJS etc.</li>
<li>Parameter-, function- and variable names are shortened</li>
<li>White space is removed.</li>
</ul>
<p>GruntJS is a nodejs based JavaScript Task Runner. The Contrib-Uglify plugin allows you to do minification.</p>
<p>Minifying is helpful, but removing code that is only used for debugging is also crucial in delivering only required JavaScript to the browser.</p>
<h4 id="Conditional-Compilation"><a href="#Conditional-Compilation" class="headerlink" title="Conditional Compilation"></a>Conditional Compilation</h4><p>You can use <a href="http://gruntjs.com/" target="_blank" rel="external">GruntJS</a> and <a href="https://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">UglifyJS</a> to accomplish conditional compiling:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> DEBUG === <span class="literal">undefined</span>) DEBUG = <span class="literal">true</span>; <span class="comment">//Force</span></div><div class="line"></div><div class="line">DEBUG &amp;&amp; <span class="built_in">console</span>.log(<span class="string">"some info"</span>);</div><div class="line"><span class="keyword">if</span> (DEBUG) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Other info"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"initial"</span>);</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//gruntfile.js</span></div><div class="line">...</div><div class="line">uglify: &#123;</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">        <span class="attr">compress</span>: &#123;</div><div class="line">            <span class="attr">global_defs</span>: &#123;</div><div class="line">                <span class="attr">DEBUG</span>: <span class="literal">false</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">dead_code</span>: <span class="literal">true</span> <span class="comment">//remove code never called</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><ul>
<li>Construct your JavaScrips as necessary instead of loading all that’s available</li>
<li>Concatenate and minify into logical code units</li>
<li>You can use JavaScript loaders (combined with dependency injection) to do the heavy lifting</li>
</ul>
<p>You can easily minify to separate JavaScript modules using GruntJS + UglifyJS.</p>
<p><a href="https://github.com/rgrove/lazyload/" target="_blank" rel="external">LazyLoadJS</a> allows you to lazy load javascript. It works well with frameworks that already handle dependencies like AngularJS:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="comment">// include lazyload.js</span></div><div class="line"></div><div class="line">$(<span class="string">"#loadButton"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    LazyLoad.js([<span class="string">"js/build/module1.min.js"</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// Now module is loaded</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a> mixes script loading and dependency management. Scripts needed are defined in the html page as usual but will not be loaded until they are required.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line">...</div><div class="line">&lt;script src=&quot;js/vendor.require.min.js&quot;</div><div class="line">    data-main=&quot;js/main&quot;&lt;/script&gt;</div><div class="line"></div><div class="line">//main.js (or main.min.js)</div><div class="line">require([&quot;myModule&quot;], function (myModule) &#123;</div><div class="line">    //use myModule</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//myModule.js</div><div class="line">define([], function () &#123; //module pattern</div><div class="line">    ...</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        cache: _cache</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Testable-JavaScript"><a href="#Testable-JavaScript" class="headerlink" title="Testable JavaScript"></a>Testable JavaScript</h2><ul>
<li>Ad-hoc JavaScript fails to separate concerns and is simply impossible to test except for UI-centric testing.<br>*</li>
</ul>
<h3 id="Why-is-testing-JS-hard"><a href="#Why-is-testing-JS-hard" class="headerlink" title="Why is testing JS hard?"></a>Why is testing JS hard?</h3><ul>
<li>Nested anonymous functions</li>
<li>Side effects because of globals or closures</li>
<li>Business rules in event handlers</li>
<li>Navigation mixed into other code</li>
</ul>
<h3 id="Types-of-tests"><a href="#Types-of-tests" class="headerlink" title="Types of tests"></a>Types of tests</h3><ul>
<li>UI Tests - Testing expected bahavior of the DOM</li>
<li>Unit Tests - Testing a single module</li>
<li>Integration Tests - Testing that multiple modules work together</li>
</ul>
<blockquote>
<p>Testability in JS is typically relative to the amount of effort you put into creating maintainable and scalable code. Good separation and modularization of your code makes it more testable.</p>
</blockquote>
<p>If you can unit test it’s a good indicator that you have a good structure or architecture in your project.</p>
<h3 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h3><blockquote>
<p>A method by which individual units of source code together with associated control data, usage procedures, and operating procedures are tested to determine if they are fit for use.</p>
</blockquote>
<ul>
<li><p>An atomic test that determines expected bahavior (for specific input, what is the expected output)</p>
</li>
<li><p><a href="http://visionmedia.github.io/mocha/" target="_blank" rel="external">Mocha</a>, <a href="http://pivotal.github.io/jasmine/" target="_blank" rel="external">Jasmine</a>, <a href="http://qunitjs.com/" target="_blank" rel="external">QUnit</a> etc.</p>
</li>
</ul>
<h3 id="A-few-useful-links"><a href="#A-few-useful-links" class="headerlink" title="A few useful links"></a>A few useful links</h3><ul>
<li><a href="http://www.slideshare.net/briandemant/smarr-oscon-2007" target="_blank" rel="external">OSCon Slides</a></li>
<li><a href="http://visualstudiogallery.msdn.microsoft.com/6ed4c78f-a23e-49ad-b5fd-369af0c2107f" target="_blank" rel="external">Web Essentials VS Plugin</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;I watched a really interesting course by Shawn Wildermuth on &lt;a href=&quot;http://www.pluralsight.com/training/Courses/TableOfCon
    
    </summary>
    
      <category term="Architecture" scheme="http://kajlund.net/categories/Architecture/"/>
    
    
      <category term="architecture" scheme="http://kajlund.net/tags/architecture/"/>
    
      <category term="javascript" scheme="http://kajlund.net/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery Mobile</title>
    <link href="http://kajlund.net/2014/01/25/jquery-mobile/"/>
    <id>http://kajlund.net/2014/01/25/jquery-mobile/</id>
    <published>2014-01-25T16:25:30.000Z</published>
    <updated>2017-06-11T13:01:53.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h4 id="Some-Resources"><a href="#Some-Resources" class="headerlink" title="Some Resources"></a>Some Resources</h4><ul>
<li><a href="http://jquerymobile.com/" target="_blank" rel="external">jQM Website</a></li>
<li><a href="http://the-jquerymobile-tutorial.org/index.php" target="_blank" rel="external">jQuery Mobile Tutorial</a></li>
<li><a href="http://www.jqmgallery.com/" target="_blank" rel="external">jQuery Mobile Gallery</a></li>
<li><a href="https://github.com/jquery/jquery-mobile" target="_blank" rel="external">at Github</a></li>
<li><a href="http://jquerymobile.com/demos/1.2.0/docs/about/intro.html" target="_blank" rel="external">jQM Intro</a></li>
<li><a href="http://jquerymobile.com/demos/1.2.0/docs/about/getting-started.html" target="_blank" rel="external">jQM Quickstart</a></li>
<li><a href="http://the-jquerymobile-tutorial.org/index.php" target="_blank" rel="external">jQuery Mobile Tutorial</a></li>
<li><a href="http://miamicoder.com/jquery-mobile-book-how-to-build-a-jquery-mobile-application/" target="_blank" rel="external">jQuery Mobile Book</a></li>
</ul>
<h3 id="What-is-jQuery-Mobile"><a href="#What-is-jQuery-Mobile" class="headerlink" title="What is jQuery Mobile"></a>What is jQuery Mobile</h3><ul>
<li><a href="http://jquerymobile.com/" target="_blank" rel="external">jQuery Mobile</a> is a lightweight (~20KB) UI library for mobile devices</li>
<li>It depends on <a href="http://jquery.com/" target="_blank" rel="external">jQuery</a></li>
<li>Supports the vast majority of all modern desktop, e-reader, smartphone and tablet platforms like iOS, Android, Blackberry, Windows Phone and others via <a href="http://en.wikipedia.org/wiki/Progressive_enhancement" target="_blank" rel="external">progressive enhancement</a></li>
<li>Support is graded into A, B and C level as described <a href="http://en.wikipedia.org/wiki/JQuery_Mobile" target="_blank" rel="external">here</a></li>
<li>Supports rotation and touch events.</li>
<li>Can bee used with PhoneGap to create native apps.</li>
<li>Supports <a href="http://jquerymobile.com/themeroller/" target="_blank" rel="external">theming</a> and accessibility features (WAI-ARIA)</li>
<li>Sometimes confused with the jQTouch plugin</li>
<li>No MVC, serialization, storage and networking</li>
<li>Short learning curve. Good for rapid prototyping</li>
</ul>
<h3 id="How-Does-It-Work"><a href="#How-Does-It-Work" class="headerlink" title="How Does It Work?"></a>How Does It Work?</h3><ul>
<li>A jQuery Mobile application consists of pages</li>
<li>jQM enhances pages on loading by taking valid HTML tags and format them using predefined styles adapting them to the current browser capabilities.</li>
<li>Relies upon jQuery and the HTML5 features supported by the hosting browser to offer extended functionality.</li>
<li>Use standard html tags with data- attributes to style markup into widgets</li>
<li>For non-capable older browsers much of the styling is ignored but the html is still valid.</li>
<li>Use old-style divs or modern html5 markup</li>
<li>Include jQuery + jQuery Mobile .js and .css files</li>
<li>Download or use a CDN</li>
<li>Viewport meta declaration</li>
</ul>
<h5 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://code.jquery.com/mobile/latest/jquery.mobile.min.css"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/mobile/latest/jquery.mobile.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Pages-and-Dialogs"><a href="#Pages-and-Dialogs" class="headerlink" title="Pages and Dialogs"></a>Pages and Dialogs</h2><h3 id="Page-Architecture"><a href="#Page-Architecture" class="headerlink" title="Page Architecture"></a>Page Architecture</h3><ul>
<li>Any section or div element using the attribute <code>data-role=&quot;page&quot;</code> is what in jQuery Mobile refers to as an internal page</li>
<li>Page content are typically loaded via AJAX, parsed and added to the DOM</li>
<li>jQM page does not equal an HTML page. You can have multiple “pages” in single file</li>
<li>A jQuery Mobile page is usually composed of three basic elements: a <strong>header</strong>, <strong>content</strong>, and a <strong>footer</strong></li>
<li>jQM will load and display the first page found in a file initially</li>
<li>If you want to modify browser page title use attribute <code>data-title=&quot;&quot;</code> on the page element</li>
<li>A page transition is used to animate a new page into place</li>
<li>You can load another page via code or by linking to it using its id</li>
<li>You can link to any external page and if jQM finds a <code>data-role=&quot;page&quot;</code> attribute it will use it’s content to replace the current page’s content. If not it will be displayed like any normal web page. These types of pages are called external pages.</li>
<li>You can link to external pages without using the normal AJAX behaviour by using the attribute <code>rel=&quot;external&quot;</code>, the attribute <code>data-ajax=&quot;false&quot;</code> or by using a target attribute on a link.</li>
</ul>
<h3 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h3><h5 id="A-page-with-header-and-footer"><a href="#A-page-with-header-and-footer" class="headerlink" title="A page with header and footer"></a>A page with header and footer</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"page"</span> <span class="attr">id</span>=<span class="string">"indexPage"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"header"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"content"</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"footer"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="Multiple-Pages"><a href="#Multiple-Pages" class="headerlink" title="Multiple Pages"></a>Multiple Pages</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery Mobile Sample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- First Page --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"first"</span> <span class="attr">data-role</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#second"</span>&gt;</span>Page 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Second Page --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"second"</span> <span class="attr">data-role</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#first"</span>&gt;</span>Page 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- External Pages using AJAX --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"anotherpage.html"</span>&gt;</span>External<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- External Pages without AJAX --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"external.html"</span> <span class="attr">rel</span>=<span class="string">"external"</span>&gt;</span>External<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"external.html"</span> <span class="attr">data-ajax</span>=<span class="string">"false"</span>&gt;</span>External<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"external.html"</span> <span class="attr">target</span>=<span class="string">"mytarget"</span>&gt;</span>External<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Transitions"><a href="#Transitions" class="headerlink" title="Transitions"></a>Transitions</h3><p>Page transitions rely on CSS3 and will not work without CSS3 support in the target browser. Transitions can be modified via the data-transition attribute of the link tag.</p>
<ul>
<li>fade</li>
<li>flip</li>
<li>pop - Default for dialogs</li>
<li>slide - Default for pages</li>
<li>slideDown</li>
<li>slideUp</li>
</ul>
<h3 id="Dialogs"><a href="#Dialogs" class="headerlink" title="Dialogs"></a>Dialogs</h3><p>You can display any valid page as a dialog by adding a data-rel=”dialog” attribute to the link tag that opens the page.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#otherpage"</span> <span class="attr">data-rel</span>=<span class="string">"dialog"</span>&gt;</span>Dialog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>jQM page headers look like native application headers. You create page headers by adding a div with attribute data-role=”page-header” inside a page element.</p>
<p>Any <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> element will be centered inside and the first a element will go on the left side of the header. Adding another a element will push it to the right.</p>
<p>Links in the header will be styled as buttons</p>
<p>The first button will be on the left, and a second button will be on the right</p>
<p>If you only want one button and have it right-aligned you add <code>class=”ui-btn-right”</code> to the link element.</p>
<p>If you want the icon to be on the right side instead of left side add attribute data-iconpos=”right”</p>
<p>To show icon only add attribute <code>data-iconpos=&quot;notext&quot;</code></p>
<p><a href="http://jquerymobile.com/demos/1.2.0/docs/toolbars/docs-headers.html" target="_blank" rel="external">more on headers</a></p>
<h5 id="Headers-Sample"><a href="#Headers-Sample" class="headerlink" title="Headers Sample"></a>Headers Sample</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>todo: ADD PICTURES</p>
<h3 id="Footers"><a href="#Footers" class="headerlink" title="Footers"></a>Footers</h3><p>To create a footer bar add a div or section with attribute data-role=”footer” inside a page element</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Buttons"><a href="#Buttons" class="headerlink" title="Buttons"></a>Buttons</h2><div align="right"><a href="http://jquerymobile.com/demos/1.2.0/docs/buttons/" target="_blank">Button doc</a> | <a href="http://jquerymobile.com/demos/1.2.0/docs/api/data-attributes.html" target="_blank">Attributes</a></div>

<p>There are basically 3 different ways to display buttons. First you can use the <code>&lt;button&gt;</code> tag, secondly you can use the <code>&lt;input&gt;</code> tag with <code>type=&quot;button&quot;</code> attribute, and finally you can use the link (<code>&lt;a&gt;</code>) tag using the attribute <code>data-role=&quot;button&quot;</code>.</p>
<p>Buttons use all available screen width by default. To avoid that you use the attribute <code>data-inline=&quot;true&quot;</code>.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Button"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span> <span class="attr">data-inline</span>=<span class="string">"true"</span></span></div></pre></td></tr></table></figure>
<h3 id="Button-Grouping"><a href="#Button-Grouping" class="headerlink" title="Button Grouping"></a>Button Grouping</h3><p>Buttons can be grouped and be placed horizontally or vertically.  To group buttons together you add them inside a <code>&lt;div&gt;</code> with <code>data-role=&quot;controlgroup&quot;</code>.</p>
<h4 id="Vertical-Group"><a href="#Vertical-Group" class="headerlink" title="Vertical Group"></a>Vertical Group</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"controlgroup"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Horizontal-Group"><a href="#Horizontal-Group" class="headerlink" title="Horizontal Group"></a>Horizontal Group</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"controlgroup"</span> <span class="attr">data-type</span>=<span class="string">"horizontal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Button-Icons"><a href="#Button-Icons" class="headerlink" title="Button Icons"></a>Button Icons</h3><p>You can provide a button with an icon by providing the attribute <code>data-icon=&quot;iconname&quot;</code>.  Available icon names are:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert | arrow-d | arrow-l | arrow-r | arrow-u | back | check | custom | delete | forward</div><div class="line">gear | grid | home | info | minus | plus | refresh | search | star</div></pre></td></tr></table></figure>
<h4 id="Icon-Positioning"><a href="#Icon-Positioning" class="headerlink" title="Icon Positioning"></a>Icon Positioning</h4><p>You can also specify the icon position using the attribute <code>data-iconpos=&quot;pos&quot;</code>. Possible values are:</p>
<pre><code>bottom | left | right | top | notexts
</code></pre><h2 id="Listviews"><a href="#Listviews" class="headerlink" title="Listviews"></a><a href="http://jquerymobile.com/demos/1.2.0/docs/lists/index.html" target="_blank" rel="external">Listviews</a></h2><p>Both ordered and unordered lists can be enhanced. To make a list a jQM listview add the attribute <code>data-role=&quot;listview&quot;</code>.</p>
<p>To make items selectable enclose the item text in a link tag. You can add dividers by using <code>data-role=&quot;divider&quot;</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-role</span>=<span class="string">"divider"</span>&gt;</span>Divider<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>List item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<p>To define a count bubble wrap the number in a <code>&lt;span&gt;</code> or other inline element and add the class <code>&quot;ui-li-count&quot;</code>.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Item 1<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ui-li-count"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<p>To add an icon include an image inside the link element using class <code>ui-li-icon</code>.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/myImg.png"</span> <span class="attr">class</span>=<span class="string">"ui-li-icon"</span> /&gt;</span></div><div class="line">    My Item</div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="List-Filtering"><a href="#List-Filtering" class="headerlink" title="List Filtering"></a>List Filtering</h4><p>Lists can easily be filtered using the attribute <code>data-filter=&quot;true&quot;</code>.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">data-role</span>=<span class="string">"listview"</span> <span class="attr">data-filter</span>=<span class="string">"true"</span></span></div><div class="line">  <span class="attr">data-filter-placeholder</span>=<span class="string">"Filter here"</span>&gt;</div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Nesting-Lists"><a href="#Nesting-Lists" class="headerlink" title="Nesting Lists"></a>Nesting Lists</h3><p>Lists can be nested within other lists.</p>
<h4 id="Split-Button-Lists"><a href="#Split-Button-Lists" class="headerlink" title="Split Button Lists"></a>Split Button Lists</h4><p>If you need a list where items have two separately tappable areas you simply add two link elements to each item.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Larger area<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Icon area<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="List-With-Complex-Items"><a href="#List-With-Complex-Items" class="headerlink" title="List With Complex Items"></a>List With Complex Items</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">data-role</span>=<span class="string">"listview"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>My Item<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>Item Summary<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ui-li-aside"</span>&gt;</span>Due 12pm<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the detail text for Item 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Toolbars"><a href="#Toolbars" class="headerlink" title="Toolbars"></a><a href="http://jquerymobile.com/demos/1.2.0/docs/toolbars/index.html" target="_blank" rel="external">Toolbars</a></h2><p>Toolbars are normally displayed at the top and bottom of a page. Toolbars can contain button and navigational elements.</p>
<p>Todo: Add image</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Todo: Add image</p>
<p>To add some spacing in the footer containing buttons add <code>class=&quot;ui-bar&quot;</code>.</p>
<h2 id="Navbars"><a href="#Navbars" class="headerlink" title="Navbars"></a><a href="http://jquerymobile.com/demos/1.2.0/docs/toolbars/docs-navbar.html" target="_blank" rel="external">Navbars</a></h2><p>Provides up to 5 buttons in a navigation bar placed in header or footer</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">data-role</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Btn 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Todo: Add image</p>
<p>To add equal width buttons add the links in an unordered list. You cal display the selected button by setting classes ui-btn-active and ui-state-persist.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">data-role</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"ui-btn-active ui-state-persist"</span>&gt;First<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span>&gt;</span>Third<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Todo: Add image</p>
<h2 id="Fixed-Toolbars"><a href="#Fixed-Toolbars" class="headerlink" title="Fixed Toolbars"></a>Fixed Toolbars</h2><ul>
<li>Inline - Default setting. Toolbar scrolls with page content.</li>
<li>Fixed - Toolbars gets hidden when scrolling but reappears at top and bottom when scrolling stops. Tapping the screen toggles display/hide of the toolbars.</li>
<li>Fullscreen - Page content takes up entire screen with toolbars placed over the content at the top and/or bottom. Tapping will show/hide toolbars.</li>
</ul>
<p>The <code>data-fullscreen=&quot;true&quot;</code> attribute is added to the page tag and the data-position attribute is added to header and/or footer toolbars.</p>
<h3 id="Fixed-Footer-Bar-with-Icons"><a href="#Fixed-Footer-Bar-with-Icons" class="headerlink" title="Fixed Footer Bar with Icons"></a>Fixed Footer Bar with Icons</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"footer"</span> <span class="attr">data-position</span>=<span class="string">"fixed"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">data-role</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span></span></div><div class="line">        <span class="attr">data-icon</span>=<span class="string">"home"</span></div><div class="line">        <span class="attr">class</span>=<span class="string">"ui-btn-active ui-state-persist"</span>&gt;Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span></span></div><div class="line">        <span class="attr">data-icon</span>=<span class="string">"star"</span>&gt;Favs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-role</span>=<span class="string">"button"</span></span></div><div class="line">        <span class="attr">data-icon</span>=<span class="string">"gear"</span>&gt;Setup<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Todo: Add image</p>
<h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a><a href="http://jquerymobile.com/demos/1.2.0/docs/forms/index.html" target="_blank" rel="external">Forms</a></h2><p>Form elements are automatically enhanced by jQM. All form elements should be wrapped inside a valid <code>&lt;form&gt;</code> element.</p>
<p>You should try to get unique form field tags across the whole site.</p>
<p>Form submissions are automatically handled via AJAX. To group related controls use an attribute <code>data-role=&quot;fieldcontain&quot;</code>.</p>
<p>jQM requires all form fields to have labels for accessibility reasons. To hide the label add class “ui-hidden-accessible”</p>
<h4 id="Text-input"><a href="#Text-input" class="headerlink" title="Text input"></a>Text input</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fld1"</span>&gt;</span>Text Input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fld1"</span> <span class="attr">id</span>=<span class="string">"fld1"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><strong> Search input</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Textarea</strong></p>
<p>Textarea fields grow automatically by 2 lines/time to try to avoid user having to scroll.<br><code>&lt;textarea&gt;I will grow automagically&lt;/textarea&gt;</code></p>
<h4 id="Radio-Buttons-Checkboxes-and-Toggle-Switches"><a href="#Radio-Buttons-Checkboxes-and-Toggle-Switches" class="headerlink" title="Radio Buttons, Checkboxes and Toggle Switches"></a>Radio Buttons, Checkboxes and Toggle Switches</h4><p>jQM uses standard markup for radio buttons and checkboxes but will enhance the look. Controls can be grouped together vertically and horizontally.</p>
<p>A specially named <code>&lt;select&gt;</code> can be styled as a toggle switch.</p>
<h4 id="Sliders-and-Select-Menus"><a href="#Sliders-and-Select-Menus" class="headerlink" title="Sliders and Select Menus"></a>Sliders and Select Menus</h4><p>Create a slider using an <code>&lt;input&gt;</code> element with <code>type=&quot;range&quot;</code>.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">data-role</span>=<span class="string">"fieldcontain"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"slider"</span>&gt;</span>Slider<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"slider"</span> <span class="attr">id</span>=<span class="string">"slider"</span> <span class="attr">value</span>=<span class="string">"25"</span></span></div><div class="line">      <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"100"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Create select menus using normal html. jQM can create customized select menus supporting multiple <code>&lt;optgroup&gt;</code>, styling using CSS. The attribute data-native=”false” will make jQM not use native style for select menus.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">data-role</span>=<span class="string">"fieldcontain"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sel"</span>&gt;</span>Select a value<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"sel"</span> <span class="attr">id</span>=<span class="string">"mySel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"v1"</span>&gt;</span>Value 1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"v2"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span>Value 2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"v3"</span>&gt;</span>Value 3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"v4"</span>&gt;</span>Value 4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a><a href="http://jquerymobile.com/demos/1.2.0/docs/content/content-grids.html" target="_blank" rel="external">Layout</a></h2><p>You can use between 2 and 5 columns in a jQuery Mobile layout grid. This could be used for layout of form fields or toolbar icons etc. Layout grids occupy all width and have no margin or padding. Grid column share the width equally.</p>
<table><br><tbody><br><tr><br><th>Class</th><br><th>cols</th><br><th>Width</th><br></tr><br><tr><br><td>ui-grid-a</td><br><td>2</td><br><td>50%/50%</td><br></tr><br><tr><br><td>ui-grid-b</td><br><td>3</td><br><td>33%/33%/33%</td><br></tr><br><tr><br><td>ui-grid-c</td><br><td>4</td><br><td>25%/25%/25%/25%</td><br></tr><br><tr><br><td>ui-grid-d</td><br><td>5</td><br><td>20%/20%/20%/20%/20%</td><br></tr><br></tbody><br></table>

<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-grid-a"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-block-a"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-block-b"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Collapsible-Content-Blocks"><a href="#Collapsible-Content-Blocks" class="headerlink" title="Collapsible Content Blocks"></a>Collapsible Content Blocks</h2><p>All container elements can be made collapsible by adding <code>data-role=&quot;collapsible&quot;</code>. Within the collapsible element any header element will be displayed as the title and any content following will be collapsible. Collapsible blocks are collapsed by default. To display them expanded add attribute <code>data-collapsed=&quot;false&quot;</code>. You can also nest collapsible blocks.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"collapsible"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"collapsible"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nested Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nested content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Collapsible-Set-Accordion"><a href="#Collapsible-Set-Accordion" class="headerlink" title="Collapsible Set (Accordion)"></a>Collapsible Set (Accordion)</h2><p>A collapsible set contains a number of collapsible blocks where only one can be expanded at a time.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"collapsible-set"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"collapsible"</span> <span class="attr">data-collapsed</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>First<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">"collapsible"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a><a href="http://jquerymobile.com/demos/1.2.0/docs/api/events.html" target="_blank" rel="external">Events</a></h2><p>Touch Events - tap, swipe, tap-hold</p>
<ul>
<li>Scroll Events</li>
<li>Page Events</li>
<li>Orientation Events</li>
</ul>
<h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a><a href="http://jquerymobile.com/demos/1.2.0/docs/api/themes.html" target="_blank" rel="external">Themes</a></h2><p>A theme is a set of unified visual appearances. jQuery Mobile ships with five default themes.  Each theme has multiple “swatches” assigned letters from a to z. Themes can be mixed throughout ta page and are assigned using the attribute <code>data-theme=&quot;x&quot;</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;h4 id=&quot;Some-Resources&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Frameworks" scheme="http://kajlund.net/categories/Frameworks/"/>
    
    
      <category term="frameworks" scheme="http://kajlund.net/tags/frameworks/"/>
    
      <category term="jqm" scheme="http://kajlund.net/tags/jqm/"/>
    
      <category term="jquery" scheme="http://kajlund.net/tags/jquery/"/>
    
      <category term="mobile" scheme="http://kajlund.net/tags/mobile/"/>
    
  </entry>
  
</feed>
